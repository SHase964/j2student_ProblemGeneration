{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を結合し、新しい配列を返す関数`merge_arrays`を作成してください。新しい配列は動的にメモリを確保し、1つ目の配列の要素の後に2つ目の配列の要素が続くように配置してください。\n\n関数`merge_arrays`は、以下の引数を受け取ります。\n\n* `arr1`: 1つ目の整数配列\n* `size1`: 1つ目の配列のサイズ\n* `arr2`: 2つ目の整数配列\n* `size2`: 2つ目の配列のサイズ\n\n関数は、以下の戻り値を返します。\n\n* 新しい配列へのポインタ。メモリ割り当てに失敗した場合は`NULL`を返します。\n\n作成した関数をテストするために、`main`関数で2つの配列を作成し、`merge_arrays`関数を呼び出して新しい配列を作成してください。そして、新しい配列の内容を表示し、最後にメモリを解放してください。",
  "reason": "学習者は、`No4.c`と`No5.c`の問題において、動的メモリ確保、配列操作、ポインタの理解を示しています。`No6.c`では、文字列操作と動的メモリ確保を組み合わせています。これらの問題を成功裏に解決していることから、学習者は配列とポインタ操作に慣れていると考えられます。\n\nこの新しい問題は、2つの配列をマージするという、より複雑な配列操作を扱います。これにより、学習者は動的メモリ確保と配列操作のスキルをさらに発展させることができます。また、この課題は、関数の作成とポインタによる配列の受け渡しといった重要なC言語の概念を強化するのにも役立ちます。",
  "examples": [
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3, arr2 = {4, 5, 6}, size2 = 3",
      "output": "1 2 3 4 5 6",
      "explanation": "2つの配列`arr1`と`arr2`が結合され、新しい配列`{1, 2, 3, 4, 5, 6}`が作成されます。"
    },
    {
      "input": "arr1 = {}, size1 = 0, arr2 = {1, 2}, size2 = 2",
      "output": "1 2",
      "explanation": "空の配列と別の配列を結合します。"
    },
    {
      "input": "arr1 = {1, 2}, size1 = 2, arr2 = {}, size2 = 0",
      "output": "1 2",
      "explanation": "別の配列と空の配列を結合します。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保",
    "配列操作",
    "ポインタ",
    "関数"
  ]
}