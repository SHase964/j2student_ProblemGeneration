{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を結合し、新しい配列を返す関数を作成してください。\n\n関数`merge_arrays`は、以下の引数を受け取ります。\n- `arr1`: 1つ目の整数配列\n- `size1`: `arr1`の要素数\n- `arr2`: 2つ目の整数配列\n- `size2`: `arr2`の要素数\n\n関数は、`arr1`と`arr2`を結合した新しい配列を動的に確保し、そのポインタを返します。新しい配列のサイズは`size1 + size2`です。\n\nまた、関数は新しい配列のサイズを`size`というポインタ変数に格納します。\n\n例えば、`arr1`が`{1, 2, 3}`、`size1`が3、`arr2`が`{4, 5, 6}`、`size2`が3の場合、関数は`{1, 2, 3, 4, 5, 6}`を格納した新しい配列へのポインタを返し、`size`には6が格納されます。\n\n確保したメモリは、呼び出し側で適切に解放する必要があります。",
  "reason": "学習者は、`malloc`を用いた動的メモリ確保、配列操作、ポインタ操作、forループとwhileループによる反復処理を理解している。そこで、これらの要素を組み合わせ、より複雑な操作を必要とする問題を提示することで、学習者の理解を深める。\n\n具体的には、\n- 2つの配列を扱うことで、サイズの異なる配列への対応力を試す。\n- 新しい配列のサイズをポインタ変数で返すことで、ポインタの理解度を確認する。\n- 動的メモリ確保と解放を明示的に行わせることで、メモリ管理の重要性を強調する。",
  "examples": [
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3, arr2 = {4, 5, 6}, size2 = 3",
      "output": "merged_array = {1, 2, 3, 4, 5, 6}, size = 6",
      "explanation": "2つの配列`arr1`と`arr2`が結合され、新しい配列`merged_array`が作成される。`size`には、新しい配列のサイズ6が格納される。"
    },
    {
      "input": "arr1 = {10, 20}, size1 = 2, arr2 = {30, 40, 50}, size2 = 3",
      "output": "merged_array = {10, 20, 30, 40, 50}, size = 5",
      "explanation": "サイズが異なる2つの配列が正しく結合されることを確認する。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保",
    "配列操作",
    "ポインタ操作",
    "関数定義",
    "メモリ管理"
  ]
}