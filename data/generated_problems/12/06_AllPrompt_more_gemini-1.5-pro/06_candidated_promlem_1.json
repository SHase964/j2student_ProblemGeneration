{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "キーボードから入力された任意の文字列を逆順に表示するプログラムを作成しなさい。\n\n(1) 文字列を格納するためのメモリ領域を動的に確保し、キーボードから入力された文字列を格納すること。\n(2) 文字列を逆順にする処理は、関数 reverse_string を作成して実装すること。\n(3) 関数 reverse_string は、文字列へのポインタを引数として受け取り、文字列を逆順にした結果を返すようにすること。\n(4) main関数では、キーボードから入力された文字列、逆順にされた文字列、そして動的に確保されたメモリ領域を解放した後に、プログラムを終了すること。\n\n**入力**\nキーボードから入力された文字列\n\n**出力**\n入力された文字列\n逆順にされた文字列\n\n**例**\n```\n入力: Hello\n出力: \nHello\nolleH\n```",
  "reason": "学習者は、No4.cとNo5.cの問題において、動的メモリ確保、配列操作、ポインタの基本的な利用方法を理解していることが示されています。しかし、No6.cは未解答であるため、文字列操作とポインタの応用に関する理解はまだ不足している可能性があります。そこで、No7.cでは、文字列操作とポインタ操作を組み合わせた応用問題として、文字列の逆順表示を課題としています。\n\nNo4.cでは、動的に確保した配列への要素の入力、出力、逆順出力、偶数出力といった基本的な操作を実装できています。No5.cでは、2次元配列の動的確保、要素へのアクセス、対角成分の和の計算といった操作を実装できています。これらの解答から、学習者は配列とポインタの基礎的な理解はできていると判断できます。\n\nNo6.cは未解答ですが、問題文から文字列の結合という操作を理解し、動的メモリ確保と文字列操作、ポインタ操作を組み合わせる必要がある問題です。No7.cは、No6.cよりも難易度を少し下げ、文字列操作とポインタ操作に焦点を当てた問題として設計しました。\n\nこの問題を通して、学習者はポインタと文字列操作への理解を深め、より複雑な文字列処理問題への挑戦に備えることができます。",
  "examples": [
    {
      "input": "Hello",
      "output": "Hello\nolleH",
      "explanation": "入力文字列\"Hello\"が正しく逆順に表示されている。"
    },
    {
      "input": "World",
      "output": "World\ndlroW",
      "explanation": "入力文字列\"World\"が正しく逆順に表示されている。"
    },
    {
      "input": "12345",
      "output": "12345\n54321",
      "explanation": "数字列も正しく逆順に表示される。"
    }
  ],
  "learning_objectives": [
    "文字列操作",
    "ポインタ操作",
    "動的メモリ確保",
    "関数定義と呼び出し"
  ]
}