{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を結合し、その結果を新しい配列に格納する関数を作成してください。\n\n関数 `merge_arrays` は以下の仕様を満たす必要があります。\n\n- 引数:\n    - `arr1`: 整数の配列1\n    - `size1`: 配列1のサイズ\n    - `arr2`: 整数の配列2\n    - `size2`: 配列2のサイズ\n- 戻り値:\n    - 結合された新しい配列へのポインタ。メモリ確保に失敗した場合は `NULL` を返す。\n\n新しい配列は、`arr1` の要素の後に `arr2` の要素が続くように結合されます。\n\n関数内で動的にメモリを割り当て、結合された配列を格納してください。呼び出し側は、関数が正常に終了した場合、返されたポインタを `free` する責任があります。\n\n例えば、`arr1` が `{1, 2, 3}` で `arr2` が `{4, 5}` の場合、結合された配列は `{1, 2, 3, 4, 5}` となります。",
  "reason": "学習者は、1次元配列の動的確保、要素へのアクセス、ループ処理、ポインタ操作を理解している。しかし、2次元配列や文字列操作に関する問題は未解答である。そこで、1次元配列の知識をさらに深める応用問題として、2つの配列をマージする問題を作成した。これにより、動的メモリ確保とポインタ操作の理解を強化し、より複雑なデータ構造への橋渡しとなる。",
  "examples": [
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3, arr2 = {4, 5}, size2 = 2",
      "output": "{1, 2, 3, 4, 5}",
      "explanation": "2つの配列が結合され、新しい配列が作成される。"
    },
    {
      "input": "arr1 = {}, size1 = 0, arr2 = {1}, size2 = 1",
      "output": "{1}",
      "explanation": "空の配列と要素が1つの配列が結合される。"
    },
    {
      "input": "arr1 = {1, 2}, size1 = 2, arr2 = {}, size2 = 0",
      "output": "{1, 2}",
      "explanation": "要素が2つの配列と空の配列が結合される。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保の理解",
    "ポインタによる配列操作",
    "配列の結合処理"
  ]
}