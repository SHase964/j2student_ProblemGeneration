{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 6,
    "description": "動的に確保した整数配列を受け取り、その配列の中央値を計算するプログラムを作成してください。配列の要素数はキーボードから入力し、要素をランダムに生成して表示してください。中央値を求めるために、配列をソートする必要があります。",
    "reason": "この問題は、学習者が動的メモリ割り当てや配列のソートを理解し、中央値の計算方法を実装する能力を高めるために設計しました。過去の問題を通じて、配列操作や基本的な制御構造には慣れているため、ソートアルゴリズムの実装を通じて新しい概念に挑戦させることが意図されています。",
    "examples": [
      {
        "input": "5",
        "output": "生成した配列: 3 5 1 4 2\n中央値: 3",
        "explanation": "5つの要素を持つ配列をランダムに生成し、ソート後に中央値を求めました。"
      }
    ],
    "learning_objectives": [
      "動的メモリ割り当ての理解",
      "配列のソートアルゴリズム（例えばバブルソートなど）の実装",
      "中央値の計算方法の理解",
      "標準入出力の使用"
    ]
  },
  "reasoning": "この問題は、学習者が動的メモリ確保と配列操作の理解を深めるために最適です。特に、ランダムな整数を生成し、それをソートして中央値を求めるという一連の流れは、実践的なプログラミングスキルを養うのに役立ちます。また、学習者が過去に配列操作に慣れていることを考慮すると、適切な挑戦となります。",
  "improvements": [
    "問題文に具体的な入力形式や制約を明記することで、学習者がより明確に理解できるようにする。",
    "ソートアルゴリズムの選択肢を明示することで、学習者が他のアルゴリズム（例えばクイックソートなど）を試す機会を提供する。",
    "出力形式を統一し、生成した配列の表示方法を明確にすることで、学習者が出力を確認しやすくする。"
  ]
}