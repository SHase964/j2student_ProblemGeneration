{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "単語の配列（文字列の配列）を受け取り、それらの単語をアルファベット順にソートして返すプログラムを作成してください。\n\n以下の制約に従ってください。\n\n1. 単語の数は最大で100とします。\n2. 各単語の最大文字数は50とします。\n3. 文字列比較にはstrcmp関数を使用してください。\n4. ソートには任意のアルゴリズムを使用できます（例：バブルソート、選択ソート、挿入ソートなど）。\n5. 単語の配列は動的に確保してください。\n6.  main関数内で、単語の数を標準入力から受け取り、各単語を標準入力から受け取ってください。\n7. ソートされた単語の配列を、main関数内で表示してください。\n\n入力例:\n5\napple\nbanana\norange\ngrape\nmelon\n\n出力例:\n\napple\nbanana\ngrape\nmelon\norange",
  "reason": "学習者は、配列、ポインタ、ランダムな数値生成、条件分岐、算術演算、動的メモリ確保、関数呼び出し、および標準入出力操作を含む基本的なC言語の概念を理解しています。\n\nNo4.cにおいて、学習者は動的配列の操作、要素へのアクセス、および反復処理を正しく実装できています。また、乱数生成、配列の要素の逆順出力、偶数の判定と出力といった課題にも適切に対処しています。\nNo5.cでは、2次元配列の動的確保、要素へのアクセス、反復処理、および標準出力への表示といった操作を試みています。\nしかし、No5.cでは、2次元配列の動的確保において、malloc関数の使用方法に誤りがあり、2次元配列の各要素にアクセスする方法も誤っています。また、問題文で要求されている対角成分の和や転置行列の計算は実装されていません。\nNo6.cは未解答です。\n\nこれらの解答から、学習者は基本的なC言語の概念を理解しているものの、2次元配列や文字列操作といった応用的な概念の理解と実装には課題があることがわかります。\n\nこの新しい問題は、学習者が文字列の配列操作、ソートアルゴリズムの実装、動的メモリ確保、標準入出力、および文字列比較といった複数の概念を統合的に活用する必要があるため、学習者の現在の理解度から適切な難易度上昇となっています。また、ソートアルゴリズムの選択を学習者に委ねることで、問題解決能力とアルゴリズム選択の理解を促進します。",
  "examples": [
    {
      "input": "3\ncat\ndog\nbird",
      "output": "bird\ncat\ndog",
      "explanation": "3つの単語\"cat\", \"dog\", \"bird\"が入力され、アルファベット順にソートされた結果が出力されています。"
    },
    {
      "input": "5\napple\nbanana\norange\ngrape\nmelon",
      "output": "apple\nbanana\ngrape\nmelon\norange",
      "explanation": "5つの単語\"apple\", \"banana\", \"orange\", \"grape\", \"melon\"が入力され、アルファベット順にソートされた結果が出力されています。"
    }
  ],
  "learning_objectives": [
    "文字列の配列の操作",
    "ソートアルゴリズムの実装",
    "動的メモリ確保",
    "標準入出力",
    "文字列比較",
    "アルゴリズムの選択と理解"
  ]
}