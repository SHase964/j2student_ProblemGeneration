{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "二次元配列（行列）を扱う関数群を作成し、行列の加算、乗算、転置を行うプログラムを作成してください。\n\n1.  行列の動的確保：任意の行数と列数を持つ行列を動的に確保する関数 `create_matrix` を作成してください。\n2.  行列の入力：キーボードから行列の要素を入力する関数 `input_matrix` を作成してください。\n3.  行列の加算：2つの行列を加算する関数 `add_matrix` を作成してください。加算結果を新しい行列に格納し、戻り値として返してください。\n4.  行列の乗算：2つの行列を乗算する関数 `multiply_matrix` を作成してください。乗算結果を新しい行列に格納し、戻り値として返してください。\n5.  行列の転置：行列を転置する関数 `transpose_matrix` を作成してください。転置結果を新しい行列に格納し、戻り値として返してください。\n6.  行列の表示：行列を表示する関数 `print_matrix` を作成してください。\n7.  行列の解放：動的に確保した行列のメモリを解放する関数 `free_matrix` を作成してください。\n\nmain関数では、2つの行列のサイズをキーボードから入力し、`create_matrix` で行列を確保し、 `input_matrix` で要素を入力した後、`add_matrix`、`multiply_matrix`、`transpose_matrix` を呼び出して結果を表示し、最後に `free_matrix` でメモリを解放してください。\n\n行列の加算、乗算が定義できない場合は、エラーメッセージを表示して終了してください。",
  "reason": "学習者は、一次元配列の動的確保、要素へのアクセス、ループ処理、条件分岐、関数定義などを理解し、利用できています。また、二次元配列の動的確保についても試みていますが、ポインタの理解と操作に課題が見られます。\n\nこの問題では、二次元配列を扱う関数群を作成することで、ポインタ操作の理解を深め、関数分割によるプログラム構造化のスキル向上を目指します。また、行列演算は、配列操作の応用として適切な難易度であり、今後の学習への足掛かりとなります。",
  "examples": [
    {
      "input": "行列Aの行数：2\n行列Aの列数：3\n行列Bの行数：3\n行列Bの列数：2\n行列Aの要素：\n1 2 3\n4 5 6\n行列Bの要素：\n7 8\n9 10\n11 12",
      "output": "行列A：\n1 2 3\n4 5 6\n\n行列B：\n7 8\n9 10\n11 12\n\n行列A + B：\n定義できません\n\n行列A * B：\n58 64\n139 154\n\n行列Aの転置：\n1 4\n2 5\n3 6\n\n行列Bの転置：\n7 9 11\n8 10 12",
      "explanation": "2つの行列AとBを入力し、加算、乗算、転置の結果を表示しています。AとBのサイズが異なるため、加算は定義できません。"
    }
  ],
  "learning_objectives": [
    "二次元配列の動的確保と操作",
    "ポインタの理解",
    "関数分割によるプログラム構造化",
    "行列演算の実装"
  ]
}