{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を結合し、その結果を新しい配列に格納する関数を作成してください。\n\n関数 `merge_arrays` は以下の仕様を満たす必要があります。\n\n* 2つの整数配列 `arr1` と `arr2`、それぞれの配列のサイズ `size1` と `size2` を引数として受け取ります。\n* `arr1` と `arr2` の要素を順番に結合した新しい配列を動的に確保し、その先頭へのポインタを返します。\n* 新しい配列のサイズは `size1 + size2` です。\n* 関数内で動的に確保したメモリは、呼び出し元で適切に解放する必要があります。\n\n例えば、`arr1` が `{1, 2, 3}` (`size1 = 3`) で、`arr2` が `{4, 5, 6}` (`size2 = 3`) の場合、返される配列は `{1, 2, 3, 4, 5, 6}` となります。",
  "reason": "学習者は、1次元配列と2次元配列の動的確保、要素へのアクセス、およびループ処理を理解している。また、配列要素の操作や条件分岐にも習熟している。\n\nこの問題では、2つの配列を扱うことで、より複雑なポインタ操作とメモリ管理を必要とする。さらに、動的に確保したメモリの解放を明示的に要求することで、メモリ管理の重要性を強調する。これは、No4.c と No5.c で示されたスキルを発展させ、より実践的な課題に挑戦させるための適切なステップである。",
  "examples": [
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3\narr2 = {4, 5, 6}, size2 = 3",
      "output": "{1, 2, 3, 4, 5, 6}",
      "explanation": "2つの配列 `arr1` と `arr2` が結合され、新しい配列が作成される。"
    },
    {
      "input": "arr1 = {10, 20}, size1 = 2\narr2 = {30, 40, 50}, size2 = 3",
      "output": "{10, 20, 30, 40, 50}",
      "explanation": "異なるサイズの配列でも正しく結合される。"
    }
  ],
  "learning_objectives": [
    "ポインタと配列の理解",
    "動的メモリ確保",
    "メモリ管理",
    "関数と引数の理解"
  ]
}