{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた文字列strと特定の文字cを受け取り、文字列strから文字cをすべて削除した新しい文字列を返す関数remove_char()を作成してください。新しい文字列を格納するためのメモリは動的に確保し、関数の呼び出し元でfree()を使って解放する必要があることに注意してください。\n\n例えば、strが\"KisarazuCity\"でcが'i'の場合、戻り値は\"KsarazuCty\"となる。\n\n関数remove_char()内で、文字列の長さを計算する関数mystrlen()、メモリを動的に確保する関数mymalloc()、文字列をコピーする関数mystrcpy()をそれぞれ作成し、使用すること。\n\nこれらの関数は、標準ライブラリ関数を使用せずに独自に実装してください。",
  "reason": "学習者は、No4.cとNo5.cの問題において、動的メモリ確保、配列操作、ポインタ操作、ループ処理、条件分岐といったC言語の基本的な概念を理解し、正しく実装できていることが確認されました。\n\nNo6.cは未解答ですが、No4.cとNo5.cの解答から、文字列操作と動的メモリ確保の基礎知識は習得済みであると推測されます。\n\nこれらの基礎知識を応用し、より複雑な文字列操作とメモリ管理を必要とする問題に挑戦することで、学習者の理解度を深めることができると考えました。\n\nこの問題では、特定の文字を削除する処理を通じて、文字列操作、動的メモリ確保、自作関数定義、ポインタ操作、ループ処理、条件分岐といった複数の概念を組み合わせた応用的なスキルを習得することができます。また、標準ライブラリ関数を使用せずに独自に実装することで、より深い理解と応用力を養うことができます。",
  "examples": [
    {
      "input": "str = \"KisarazuCity\", c = 'i'",
      "output": "\"KsarazuCty\"",
      "explanation": "文字列\"KisarazuCity\"から文字'i'を2つ削除した結果"
    },
    {
      "input": "str = \"programming\", c = 'g'",
      "output": "\"prorammin\"",
      "explanation": "文字列\"programming\"から文字'g'を2つ削除した結果"
    },
    {
      "input": "str = \"hello\", c = 'x'",
      "output": "\"hello\"",
      "explanation": "文字列\"hello\"には文字'x'が含まれていないため、変更なし"
    }
  ],
  "learning_objectives": [
    "文字列操作",
    "動的メモリ確保",
    "自作関数定義",
    "ポインタ操作",
    "ループ処理",
    "条件分岐"
  ]
}