{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 7,
    "description": "以下の仕様を満たすC言語プログラムを作成してください。\n\n1. ユーザーから10個以下の正の整数の個数を入力させます。\n2. その個数分の正の整数をユーザーに入力させ、それらを動的に確保された配列に格納します。\n3. 配列に格納された数値から、偶数のみを抽出し、新たな動的に確保された配列に格納します。\n4. 偶数の配列の要素数を表示します。\n5. 偶数の配列の要素を昇順にソートし、ソート済みの配列を表示します。\n6. 確保した全ての動的メモリを解放します。\n\nエラー処理は不要です。ただし、入力される数値は全て正の整数であることを前提としてください。",
    "reason": "学習者は動的メモリ確保、配列操作、偶数判定、そしてソートという複数の概念を理解していることを確認しました。そのため、これらの概念を統合し、さらに配列の要素数を動的に決定する要素を加えることで、より高度な問題に挑戦できるように設計しました。ソートアルゴリズムは、選択ソートやバブルソートなど、学習者が既に知っているアルゴリズムを使用することを想定しています。この問題は、動的メモリ管理、配列操作、アルゴリズム設計、そして複数のデータ構造の同時利用といった、複数の重要な概念を統合的に評価できるため、学習効果が高いと考えられます。",
    "examples": [
      {
        "input": "5\n2\n5\n8\n1\n4",
        "output": "偶数の要素数: 3\nソート済み偶数配列: 2 4 8",
        "explanation": "ユーザーは5個の数字を入力しました。その中で偶数は2, 8, 4です。これらの偶数を昇順にソートすると2, 4, 8となります。"
      }
    ],
    "learning_objectives": [
      "動的メモリ確保と解放",
      "配列操作",
      "条件分岐",
      "偶数判定",
      "ソートアルゴリズムの実装",
      "複数の動的配列の同時管理"
    ]
  },
  "reasoning": "3つの問題候補の中で、この問題が学習者の現在のスキルレベルに最も適していると考えられるため選択しました。動的メモリ確保、配列操作といった基礎的なスキルに加え、偶数判定、ソートアルゴリズムといったより高度な概念も含まれており、学習者の理解度を多角的に評価できます。また、複数の動的配列を同時に管理する必要があるため、メモリ管理のスキルも確認できます。他の問題と比較して、この問題の方が学習効果が高く、より実践的なプログラミングスキルを養うのに役立つと考えられます。",
  "improvements": [
    "エラー処理の追加：より堅牢なプログラムを作るために、入力値のバリデーションやメモリ確保失敗時のエラー処理を追加することを検討する。",
    "ソートアルゴリズムの指定：学習者がどのソートアルゴリズムを使用するかを指定することで、より具体的なフィードバックが可能になる。",
    "詳細な出力：ソート前の偶数配列も出力することで、ソート処理の結果をより明確に確認できるようにする。",
    "関数化の推奨：コードの可読性と保守性を向上させるために、各処理を関数化することを推奨する。"
  ]
}