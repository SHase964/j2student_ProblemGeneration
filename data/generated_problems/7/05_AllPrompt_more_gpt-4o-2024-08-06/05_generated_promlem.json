{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 6,
    "description": "整数の配列を動的に確保し、その配列の要素を標準入力から受け取ってください。次に、その配列の要素を昇順にソートし、ソート後の配列を出力するプログラムを作成してください。ソートにはバブルソートを使用してください。",
    "reason": "学習者は動的メモリ確保、ポインタ操作、配列操作の基本を理解しています。これに基づき、動的配列の扱いと基本的なソートアルゴリズムであるバブルソートを組み合わせた課題を設定しました。既存の知識を活用しつつ、新たにソートアルゴリズムの実装を学ぶことで、理解を深めることを目的としています。",
    "examples": [
      {
        "input": "5\n1 3 5 2 4",
        "output": "1 2 3 4 5",
        "explanation": "入力された5つの整数を昇順にソートした結果"
      },
      {
        "input": "3\n9 8 7",
        "output": "7 8 9",
        "explanation": "入力された3つの整数を昇順にソートした結果"
      }
    ],
    "learning_objectives": [
      "動的メモリの確保と解放",
      "ポインタと配列の操作",
      "基本的なソートアルゴリズムの理解と実装"
    ]
  },
  "reasoning": "この問題は、学習者の現在のスキルセットに最も適合しており、動的メモリ管理と基本的なアルゴリズムの実装を組み合わせることで、実践的なスキルを強化できます。バブルソートはシンプルでありながら、アルゴリズムの基本を理解するのに適しており、学習者が新しい概念を学ぶのに最適です。",
  "improvements": [
    "問題文において、動的メモリの解放を明示的に指示することで、メモリリークを防ぐ重要性を強調する。",
    "バブルソートの効率性についての考察を促す追加の質問を設け、アルゴリズムの改善について考える機会を提供する。"
  ]
}