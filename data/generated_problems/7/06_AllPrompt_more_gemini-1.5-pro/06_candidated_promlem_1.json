{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "二次元配列（行列）を扱う関数を作成してください。この関数は、指定された行数と列数で動的に二次元配列を確保し、各要素にランダムな整数を代入します。さらに、この行列の各行の合計値を計算し、新しい一次元配列に格納して返します。\n\n関数プロトタイプ:\n```c\nint *calculate_row_sums(int rows, int cols);\n```\n\n入力:\n- rows: 行数（正の整数）\n- cols: 列数（正の整数）\n\n出力:\n- 各行の合計値を格納した一次元配列へのポインタ。エラーが発生した場合はNULLポインタを返します。\n\n制約:\n- ランダムな整数の範囲は0から99とします。\n- メモリの確保と解放は適切に行ってください。",
  "reason": "学習者は、一次元配列と二次元配列の動的確保、ランダムな数値の生成、配列要素へのアクセス、ポインタ操作、forループ、if文といった基本的なC言語の概念を理解し、正しく使用できています。No4.cとNo5.cの問題では、これらのスキルを用いて問題をほぼ完全に解けています。No6.cの問題は未解答ですが、No4.cとNo5.cの解答から、文字列操作やポインタ演算に関する知識も習得している可能性が高いと判断しました。\n\nこの新しい問題は、学習者が既存の知識を応用し、より複雑な問題に挑戦できるように設計されています。具体的には、二次元配列の動的確保、行の合計値の計算、一次元配列への結果の格納、そしてエラー処理といった要素が含まれています。これらの要素は、より高度なC言語プログラミングにおいて重要な概念であり、学習者の更なる成長を促すと考えられます。",
  "examples": [
    {
      "input": "rows = 3, cols = 4",
      "output": "行1の合計: 171\n行2の合計: 152\n行3の合計: 204",
      "explanation": "3行4列の二次元配列が作成され、各要素に0から99のランダムな整数が代入されます。その後、各行の合計値が計算され、一次元配列に格納されます。最後に、各行の合計値が表示されます。"
    },
    {
      "input": "rows = 2, cols = 2",
      "output": "行1の合計: 123\n行2の合計: 75",
      "explanation": "2行2列の二次元配列が作成され、各要素に0から99のランダムな整数が代入されます。その後、各行の合計値が計算され、一次元配列に格納されます。最後に、各行の合計値が表示されます。"
    }
  ],
  "learning_objectives": [
    "二次元配列の動的確保",
    "配列要素の操作",
    "メモリ管理",
    "関数定義と呼び出し",
    "エラー処理"
  ]
}