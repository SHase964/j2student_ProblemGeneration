{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を結合し、新しい配列を返す関数`merge_arrays`を作成してください。\n\n関数`merge_arrays`は、以下の引数を受け取ります。\n- `arr1`: 1つ目の整数配列\n- `size1`: `arr1`の要素数\n- `arr2`: 2つ目の整数配列\n- `size2`: `arr2`の要素数\n\n関数は、`arr1`と`arr2`のすべての要素をこの順序で含む新しい配列を動的に割り当て、そのポインタを返します。新しい配列のサイズは`size1 + size2`です。\n\nまた、main関数で以下の処理を行ってください。\n1. 2つの配列をキーボード入力から取得する。\n2. `merge_arrays`関数を呼び出し、結合された配列を取得する。\n3. 結合された配列の内容を表示する。\n4. 動的に割り当てられたメモリを解放する。",
  "reason": "学習者は、配列、ポインタ、動的メモリ割り当て、およびループ処理に関する基本的な理解を示しています。No4.cとNo5.cの問題で、動的メモリ割り当てと配列操作を正しく実装できています。\n\nこの新しい問題は、学習者がこれらの概念をより複雑なシナリオで応用できるように設計されています。具体的には、2つの配列を扱うことで、メモリ管理とループ処理のスキルをさらに強化する必要があります。また、関数の引数として配列を受け渡し、新しい配列を返す必要があるため、ポインタの理解も深まります。\n\nこの問題は、No4.cやNo5.cの問題よりも複雑ですが、学習者の現在のスキルセットを考慮すると適切な難易度であると考えられます。",
  "examples": [
    {
      "input": "5\n1 2 3 4 5\n3\n6 7 8",
      "output": "1 2 3 4 5 6 7 8"
    },
    {
      "input": "2\n10 20\n4\n30 40 50 60",
      "output": "10 20 30 40 50 60"
    },
    {
      "input": "0\n\n1\n100",
      "output": "100"
    }
  ],
  "learning_objectives": [
    "動的メモリ割り当ての理解",
    "ポインタを用いた配列操作",
    "関数への配列の受け渡し",
    "メモリリークの防止"
  ]
}