{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を結合し、新しい配列を返す関数を作成してください。\n\n関数`merge_arrays`は、以下の引数を受け取ります。\n\n- `arr1`: 1つ目の整数配列\n- `size1`: `arr1`のサイズ\n- `arr2`: 2つ目の整数配列\n- `size2`: `arr2`のサイズ\n\n関数は、`arr1`と`arr2`の要素を結合した新しい配列を動的に確保し、そのポインタを返します。新しい配列のサイズは`size1 + size2`です。\n\nまた、この関数を呼び出し、結果を確認する`main`関数も作成してください。`main`関数では、2つの配列を定義し、`merge_arrays`関数を呼び出して結合された配列を取得し、その内容を表示します。その後、動的に確保されたメモリを解放してください。",
  "reason": "学習者は、配列の動的確保、要素へのアクセス、ループ処理、ポインタ操作など、C言語の基礎的な概念を理解し、正しく使用しています。No4.cとNo5.cの問題では、動的に確保した配列を操作するプログラムを正しく作成できています。No6.cの問題では、文字列の結合をmallocを用いて実現できています。これらの解答から、学習者は配列とポインタの操作に習熟していると判断できます。\n\n次のステップとして、複数の配列を扱う能力を評価するために、2つの配列を結合する問題を提示します。この問題は、動的メモリ確保、配列操作、ポインタ操作、および関数定義といった複数の概念を組み合わせる必要があるため、学習者にとって適切な挑戦となります。",
  "examples": [
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3\narr2 = {4, 5, 6}, size2 = 3",
      "output": "1 2 3 4 5 6",
      "explanation": "2つの配列{1, 2, 3}と{4, 5, 6}が結合され、新しい配列{1, 2, 3, 4, 5, 6}が作成されます。"
    },
    {
      "input": "arr1 = {10, 20}, size1 = 2\narr2 = {30, 40, 50, 60}, size2 = 4",
      "output": "10 20 30 40 50 60",
      "explanation": "2つの配列{10, 20}と{30, 40, 50, 60}が結合され、新しい配列{10, 20, 30, 40, 50, 60}が作成されます。"
    }
  ],
  "learning_objectives": [
    "関数の定義と呼び出し",
    "動的メモリ確保",
    "配列操作",
    "ポインタ操作"
  ]
}