{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 6,
    "description": "動的に確保した配列に対して、ユーザーが入力した整数の中央値を求めるプログラムを作成してください。まず、整数の個数を入力し、次にその個数分の整数を入力した後、配列をソートして中央値を計算して表示します。",
    "reason": "学習者は動的配列の使用に熟練しており、基本的な配列操作やループ処理も理解しています。この問題では、ソートアルゴリズムを用いて中央値を求めるという新たな課題を導入することで、さらに応用力を高めることを目指します。",
    "examples": [
      {
        "input": "5\n3\n1\n4\n2\n5\n",
        "output": "中央値は 3\n",
        "explanation": "入力された整数をソートすると、1, 2, 3, 4, 5 となり、中央値は 3 です。"
      },
      {
        "input": "6\n10\n20\n30\n40\n50\n60\n",
        "output": "中央値は 35\n",
        "explanation": "入力された整数をソートすると、10, 20, 30, 40, 50, 60 となり、中央値は (30 + 40) / 2 = 35 です。"
      }
    ],
    "learning_objectives": [
      "動的メモリ割り当ての理解",
      "配列のソートアルゴリズム（例：バブルソートやクイックソート）の実装",
      "中央値の計算方法の理解",
      "入力処理と出力処理の適切な実装"
    ]
  },
  "reasoning": "この問題は、学習者が動的メモリ管理や配列操作に熟練していることを考慮し、さらに応用力を高めるために選択しました。中央値の計算は、配列のソートと組み合わせることで、より実践的なプログラミングスキルを養うことができます。",
  "improvements": [
    "ソートアルゴリズムの選択肢を明示することで、学習者が自分で選ぶことができるようにする。",
    "入力値の検証を追加し、無効な入力に対するエラーハンドリングを促す。",
    "中央値の計算方法について、偶数個の整数の場合の処理を明確にするための説明を追加する。"
  ]
}