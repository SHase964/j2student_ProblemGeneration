{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を結合し、新たな配列を動的に作成して返す関数`merge_arrays`を作成してください。\n\n関数`merge_arrays`は、以下の引数を受け取ります。\n- `arr1`: 1つ目の整数配列\n- `size1`: `arr1`の要素数\n- `arr2`: 2つ目の整数配列\n- `size2`: `arr2`の要素数\n\n関数は、`arr1`と`arr2`の要素を結合した新たな配列を動的に作成し、そのポインタを返します。また、新たな配列のサイズを格納するためのポインタ`merged_size`も引数として受け取ります。\n\n作成した新たな配列は、呼び出し元で適切に解放する必要があります。\n\n例えば、`arr1`が`{1, 2, 3}`、`size1`が3、`arr2`が`{4, 5, 6}`、`size2`が3の場合、結合された配列は`{1, 2, 3, 4, 5, 6}`となり、`merged_size`には6が格納されます。",
  "reason": "学習者は、動的配列の確保、配列要素の操作、ループ処理、ポインタ操作など、C言語の基礎的な概念を理解し、問題を解決できています。しかし、No6.cの問題では、文字列の結合処理にやや冗長なコードが見られ、より効率的な方法を学ぶ余地があります。\n\nこの新しい問題では、2つの配列を結合するという課題を通して、動的メモリ確保とポインタ操作の理解を深めることを目的としています。また、配列サイズを別途引数として渡すことで、ポインタによる値の受け渡しについても学習します。これは、より複雑なデータ構造を扱うための基礎となります。\n\nさらに、この問題は、メモリ管理の重要性を強調する機会を提供します。作成した配列を呼び出し元で解放する必要があるため、メモリリークを防ぐための適切なコーディング習慣を身につけることができます。",
  "examples": [
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3, arr2 = {4, 5, 6}, size2 = 3",
      "output": "merged_array = {1, 2, 3, 4, 5, 6}, merged_size = 6",
      "explanation": "2つの配列`arr1`と`arr2`が結合され、新たな配列`merged_array`が作成されます。`merged_size`には、結合された配列のサイズが格納されます。"
    },
    {
      "input": "arr1 = {}, size1 = 0, arr2 = {1, 2}, size2 = 2",
      "output": "merged_array = {1, 2}, merged_size = 2",
      "explanation": "空の配列と要素を持つ配列が結合されます。"
    },
    {
      "input": "arr1 = {1, 2}, size1 = 2, arr2 = {}, size2 = 0",
      "output": "merged_array = {1, 2}, merged_size = 2",
      "explanation": "要素を持つ配列と空の配列が結合されます。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保",
    "ポインタ操作",
    "配列操作",
    "メモリ管理"
  ]
}