{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 6,
    "description": "動的に確保した整数の配列を受け取り、その配列のすべての要素の中央値を求めるプログラムを作成してください。中央値を求めるためには、まず配列をソートする必要があります。ソートにはバブルソートを使用してください。また、奇数の要素数の場合は中央の要素、偶数の要素数の場合は中央の2つの要素の平均を計算してください。",
    "reason": "この問題は、学習者が動的メモリ確保や配列の操作、ソートアルゴリズムに関する理解を深めるために設計しました。過去の問題で動的配列や基本的な配列の操作ができていたため、中央値計算を通じて新たにソートの概念を導入します。",
    "examples": [
      {
        "input": "3 1 4 2 5\n",
        "output": "3\n",
        "explanation": "配列 [3, 1, 4, 2, 5] をソートすると [1, 2, 3, 4, 5] になり、中央値は3です。"
      },
      {
        "input": "6\n10 20 30 40 50 60\n",
        "output": "35\n",
        "explanation": "配列 [10, 20, 30, 40, 50, 60] をソートすると変わらず、中央値は (30 + 40) / 2 = 35 です。"
      }
    ],
    "learning_objectives": [
      "動的メモリ確保の理解",
      "配列のソートアルゴリズムの実装",
      "中央値の計算方法の理解",
      "整数の配列操作"
    ]
  },
  "reasoning": "この問題は、学習者が動的メモリ管理や配列の操作に関する基礎を既に理解していることを考慮し、中央値を求めるという新しい概念を導入することで、より深い理解を促進します。また、ソートアルゴリズムを使用することで、プログラミングの実践的なスキルを向上させることができます。",
  "improvements": [
    "バブルソート以外のソートアルゴリズム（例：クイックソートやマージソート）を選択肢として提示し、学習者に選ばせることで、より多様なアルゴリズムの理解を促す。",
    "中央値の計算方法について、具体的な例を増やし、学習者が理解しやすいようにする。",
    "動的メモリの解放についても触れ、メモリ管理の重要性を強調する。"
  ]
}