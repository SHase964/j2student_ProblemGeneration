{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 7,
    "description": "与えられたテキストファイルから単語を抽出し、各単語の出現回数をカウントするプログラムを作成してください。\n\n**要件:**\n\n1. テキストファイル名はコマンドライン引数として受け取ります。\n2. 単語はスペース、タブ、改行で区切られているとします。\n3. 各単語とその出現回数を標準出力に出力します。\n4. 動的メモリ確保を行い、メモリリークを防ぐようにしてください。\n5. 句読点（.,!?など）は単語の一部とみなさず、除去してください。\n6. 英小文字と英大文字を区別せずにカウントしてください。\n\n**例:**\n入力ファイル `input.txt`:\n```\nThis is a sample text file.\nThis is a test. This is a good test!\n```\n\n出力:\n```\nthis: 4\nis: 4\na: 3\nsample: 1\ntext: 1\nfile: 1\ntest: 2\ngood: 1\n```",
    "reason": "学習者は、動的メモリ確保、配列、文字列操作、ファイル入出力といったC言語の基礎的な概念を習得しています。この問題は、これらの概念を統合的に活用し、さらに文字列の前処理や大文字小文字の変換といった、より高度な文字列操作のスキルを習得させることを目的としています。コマンドライン引数の処理も加えることで、実践的なプログラミングスキルを向上させることができます。また、ハッシュテーブルなどのデータ構造を用いる発展的な実装も可能で、学習者の探究心を刺激することができます。",
    "examples": [
      {
        "input": "input.txt\nThis is a sample text file.\nThis is a test. This is a good test!",
        "output": "this: 4\nis: 4\na: 3\nsample: 1\ntext: 1\nfile: 1\ntest: 2\ngood: 1",
        "explanation": "入力ファイルから単語を抽出し、各単語の出現回数をカウントしています。句読点は除去され、大文字小文字は区別されていません。"
      }
    ],
    "learning_objectives": [
      "ファイル入出力",
      "コマンドライン引数の処理",
      "動的メモリ確保と解放",
      "文字列操作（大文字小文字変換、句読点除去）",
      "ハッシュテーブルまたはその他のデータ構造の使用（発展課題）"
    ]
  },
  "reasoning": "3つの問題候補の中で、この問題が学習者のスキルレベルに最も適していると考えられるためです。動的メモリ確保、文字列操作、ファイル入出力、コマンドライン引数の処理など、既に学習済みの複数の概念を統合的に活用する必要があるため、学習効果が高いと判断しました。また、句読点除去や大文字小文字の無視といった、文字列処理に関する高度なスキルも要求されるため、学習者のスキル向上に繋がるでしょう。発展課題としてハッシュテーブルの利用も提案することで、より高度なプログラミング技術への挑戦を促すこともできます。",
  "improvements": [
    "エラー処理の追加（ファイルが存在しない場合など）",
    "より詳細なエラーメッセージの出力",
    "入力ファイルのエンコーディングの指定",
    "大文字小文字変換処理の効率化",
    "ハッシュテーブルを用いた実装例を示すヒントの追加"
  ]
}