{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられたテキストファイルから単語を抽出し、各単語の出現回数をカウントするプログラムを作成してください。\n\n**要件:**\n\n1. テキストファイル名はコマンドライン引数として受け取ります。\n2. 単語はスペース、タブ、改行で区切られているとします。\n3. 各単語とその出現回数を標準出力に出力します。\n4. 動的メモリ確保を行い、メモリリークを防ぐようにしてください。\n5. 句読点（.,!?など）は単語の一部とみなさず、除去してください。\n6. 英小文字と英大文字を区別せずにカウントしてください。\n\n**例:**\n入力ファイル `input.txt`:\n```\nThis is a sample text file.\nThis is a test. This is a good test!\n```\n\n出力:\n```\nthis: 4\nis: 4\na: 3\nsample: 1\ntext: 1\nfile: 1\ntest: 2\ngood: 1\n```",
  "reason": "学習者は、動的メモリ確保、配列、文字列操作、ファイル入出力といったC言語の基礎的な概念を習得しています。この問題は、これらの概念を統合的に活用し、さらに文字列の前処理や大文字小文字の変換といった、より高度な文字列操作のスキルを習得させることを目的としています。コマンドライン引数の処理も加えることで、実践的なプログラミングスキルを向上させることができます。",
  "examples": [
    {
      "input": "input.txt\nThis is a sample text file.\nThis is a test. This is a good test!",
      "output": "this: 4\nis: 4\na: 3\nsample: 1\ntext: 1\nfile: 1\ntest: 2\ngood: 1",
      "explanation": "入力ファイルから単語を抽出し、各単語の出現回数をカウントしています。句読点は除去され、大文字小文字は区別されていません。"
    }
  ],
  "learning_objectives": [
    "ファイル入出力",
    "コマンドライン引数の処理",
    "動的メモリ確保と解放",
    "文字列操作（大文字小文字変換、句読点除去）",
    "ハッシュテーブルまたはその他のデータ構造の使用（発展課題）"
  ]
}