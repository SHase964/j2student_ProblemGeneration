{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 6,
    "description": "整数の配列を引数として受け取り、配列内の要素を基準にして新しい配列を作成する関数`filter_even()`を実装してください。この関数は、元の配列の偶数の要素だけを含む新しい配列を動的に確保し、そのサイズを返します。また、作成した新しい配列を出力してください。",
    "reason": "学習者は配列の基本操作や動的メモリ確保の方法を理解していることが確認されており、次のステップとして応用的な配列操作を学ぶことが適切であると判断しました。この問題は、元の配列から特定の条件に基づいて新しい配列を作成するという新しい概念を導入し、動的メモリ管理の理解を深めることができます。",
    "examples": [
      {
        "input": "5\n1 2 3 4 5",
        "output": "2\n4\n",
        "explanation": "元の配列が{1, 2, 3, 4, 5}のとき、偶数は2と4で、新しい配列にはこれらの要素が含まれます。"
      },
      {
        "input": "6\n10 15 20 25 30 35",
        "output": "10\n20\n30\n",
        "explanation": "元の配列が{10, 15, 20, 25, 30, 35}のとき、偶数は10, 20, 30で、新しい配列にはこれらの要素が含まれます。"
      }
    ],
    "learning_objectives": [
      "動的メモリ確保の理解",
      "関数による配列の引数受け渡し",
      "条件に基づく配列のフィルタリング",
      "新しい配列の作成と出力"
    ]
  },
  "reasoning": "この問題は、学習者が動的メモリ確保や配列操作の基礎を理解していることを前提に、より応用的なスキルを養うために適しています。特に、条件に基づいて配列をフィルタリングするという新しい概念を導入することで、学習者の問題解決能力を高めることが期待できます。",
  "improvements": [
    "問題文に具体的な制約条件（例：配列のサイズが1以上であることなど）を追加することで、より明確にする。",
    "出力形式について、配列の要素を改行で区切ることを明示する。",
    "例題の数を増やし、異なるケースを示すことで、学習者がより多様な状況に対応できるようにする。"
  ]
}