{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数配列を結合し、新しい配列を返す関数を作成してください。新しい配列は動的に確保し、不要になったメモリは適切に解放してください。\n\n関数プロトタイプ:\n```c\nint *merge_arrays(int arr1[], int size1, int arr2[], int size2);\n```\n\n入力:\n- `arr1`: 1つ目の整数配列\n- `size1`: 1つ目の配列のサイズ\n- `arr2`: 2つ目の整数配列\n- `size2`: 2つ目の配列のサイズ\n\n出力:\n- 結合された新しい配列へのポインタ。メモリ確保に失敗した場合はNULLポインタを返す。\n\n備考:\n- 関数内で動的にメモリを割り当て、結合された配列を格納してください。\n- 関数の呼び出し元は、返されたポインタが指すメモリ領域を`free()`関数を使用して解放する責任があります。",
  "reason": "学習者は、1次元配列の動的確保、要素へのアクセス、およびループ処理を理解している。しかし、No5.cとNo6.cが未解答であることから、2次元配列や文字列操作、メモリ管理には課題が見られる。そこで、1次元配列を用いた応用問題として、2つの配列をマージする問題を提示する。これにより、動的メモリ確保とサイズの管理、ポインタによる値の受け渡しをより深く理解することを促す。また、メモリリークを防ぐための適切なfree関数の使用も学習目標に含める。",
  "examples": [
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3\narr2 = {4, 5, 6}, size2 = 3",
      "output": "{1, 2, 3, 4, 5, 6}",
      "explanation": "2つの配列`arr1`と`arr2`が結合され、新しい配列が作成される。"
    },
    {
      "input": "arr1 = {}, size1 = 0\narr2 = {1, 2}, size2 = 2",
      "output": "{1, 2}",
      "explanation": "空の配列と`arr2`が結合される。"
    },
    {
      "input": "arr1 = {1, 2}, size1 = 2\narr2 = {}, size2 = 0",
      "output": "{1, 2}",
      "explanation": "`arr1`と空の配列が結合される。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保",
    "配列操作",
    "ポインタ",
    "メモリ管理"
  ]
}