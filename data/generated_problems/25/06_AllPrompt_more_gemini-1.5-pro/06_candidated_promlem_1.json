{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を結合し、その結果を新しい配列に格納して返す関数を作成しなさい。\n\n関数内で、必要なメモリ領域を動的に確保し、結合された配列を格納すること。また、元の2つの配列は変更しないように配慮すること。\n\n例えば、配列1が{1, 2, 3}、配列2が{4, 5, 6}の場合、結合された配列は{1, 2, 3, 4, 5, 6}となります。\n\n作成する関数のプロトタイプは以下の通りです。\n\n```c\nint *combine_arrays(int arr1[], int size1, int arr2[], int size2);\n```\n\n関数内で確保したメモリは、main関数内で適切に解放すること。",
  "reason": "学習者はNo4.cで動的メモリ確保と配列操作、forループの基本的な利用を理解している。しかし、No5.cとNo6.cには未解答であるため、2次元配列や文字列操作といった複雑な操作への理解度は低いと推測される。\n\nこの問題では、No4.cで示された配列操作の理解をさらに深め、動的メモリ確保をより複雑な状況で適用する能力を評価する。また、関数を通じて配列を操作するスキルも同時に評価できる。\n\n2次元配列や文字列操作といった未習得の概念は避け、既習の概念を応用的に使用することで、学習者の能力を適切に評価し、学習進度を促進できると考えられる。",
  "examples": [
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3\narr2 = {4, 5, 6}, size2 = 3",
      "output": "{1, 2, 3, 4, 5, 6}",
      "explanation": "2つの配列が正しく結合されていることを示す例"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保の理解",
    "配列操作",
    "関数定義と利用",
    "ポインタの理解"
  ]
}