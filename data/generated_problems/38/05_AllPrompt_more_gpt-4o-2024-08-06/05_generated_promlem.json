{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 6,
    "description": "動的に確保した配列を用いて、指定された数の整数を入力し、中央値を計算して出力するプログラムを作成してください。配列のサイズはユーザー入力によって決定され、中央値を計算するために配列をソートする必要があります。",
    "reason": "学習者は動的メモリ管理、配列操作、基本的なアルゴリズム（ソート）を理解しているようです。新しい問題では、配列操作と並べ替えアルゴリズム（例えばバブルソートやクイックソートの簡単な実装）を使用することで、既存の理解を応用しつつ、中央値計算という新しい概念を導入します。",
    "examples": [
      {
        "input": "5\n3 1 4 1 5\n",
        "output": "中央値は3です\n",
        "explanation": "入力された5つの数値をソートすると、1, 1, 3, 4, 5となり、中央値は3です。"
      },
      {
        "input": "6\n3 1 4 1 5 9\n",
        "output": "中央値は3.5です\n",
        "explanation": "入力された6つの数値をソートすると、1, 1, 3, 4, 5, 9となり、中央値は(3 + 4) / 2 = 3.5です。"
      }
    ],
    "learning_objectives": [
      "動的メモリの確保と解放",
      "配列のソートアルゴリズムの理解",
      "中央値の計算方法",
      "ユーザー入力処理"
    ]
  },
  "reasoning": "この問題は、学習者の既存のスキルである動的メモリ管理と配列操作を活用しつつ、新たに中央値の計算という概念を導入することで、理解を深めることができます。ソートアルゴリズムの実装を通じて、アルゴリズムの理解を強化し、実用的なスキルを養うことができます。また、ユーザー入力を処理することで、実際のプログラム開発に近い経験を提供します。",
  "improvements": [
    "ソートアルゴリズムの選択肢を明示し、簡単な実装例を提供することで、学習者がより具体的に取り組めるようにする。",
    "動的メモリの解放に関する注意点を強調し、メモリリークを防ぐためのベストプラクティスを紹介する。",
    "中央値の計算における偶数個の要素の場合の処理を、より詳細に説明する。"
  ]
}