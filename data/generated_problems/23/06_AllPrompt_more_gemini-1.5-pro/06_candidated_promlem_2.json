{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を、それぞれ昇順にソートし、その後、2つのソート済み配列をマージして、新たな昇順ソート済みの配列を作成するプログラムを作成しなさい。\n\n例えば、配列1が{5, 2, 8, 1}、配列2が{9, 3, 7, 4}の場合、出力は{1, 2, 3, 4, 5, 7, 8, 9}となります。\n\n関数を作成して、それぞれ以下の処理を行うように実装してください。\n\n1. ソート関数: 整数の配列と要素数を受け取り、配列を昇順にソートする。\n2. マージ関数: 2つのソート済み配列とそれぞれの要素数を受け取り、マージした新たな昇順ソート済み配列を返す。\n\n動的メモリ確保を用いて、必要なメモリを確保し、不要になったメモリは解放すること。",
  "reason": "学習者は、動的メモリ確保、配列操作、ループ処理、条件分岐といった基本的なC言語の概念を理解し、正しく使用できることを示しています。\n\nNo4.cでは、動的に配列を確保し、ランダムな値を代入、出力、逆順出力、偶数出力といった操作を正しく実装しています。\nNo5.cでは、2次元配列の動的確保、要素へのアクセス、転置行列の計算など、より複雑な配列操作を理解していることが分かります。\nNo6.cでは、文字列操作と動的メモリ確保を組み合わせて、2つの文字列を結合するプログラムを正しく作成しています。\nこれらの解答から、学習者はC言語の基礎をしっかりと理解しており、次のステップとして、アルゴリズムの学習に進む準備ができていると判断しました。そこで、ソートとマージという基本的なアルゴリズムを題材とした問題を提示することで、アルゴリズムの理解を深め、より高度なプログラミングスキルを習得する機会を提供します。\n\nこの問題は、学習者がこれまで使用してきたスキルセット（動的メモリ確保、配列操作、ループ処理、条件分岐）を応用し、新たな概念であるソートとマージアルゴリズムを学ぶ機会となります。",
  "examples": [
    {
      "input": "配列1: {5, 2, 8, 1}\n配列2: {9, 3, 7, 4}",
      "output": "{1, 2, 3, 4, 5, 7, 8, 9}",
      "explanation": "2つの配列がそれぞれソートされ、その後マージされて、新たな昇順ソート済みの配列が作成されます。"
    }
  ],
  "learning_objectives": [
    "ソートアルゴリズムの理解",
    "マージアルゴリズムの理解",
    "動的メモリ確保の応用",
    "配列操作の応用",
    "関数分割によるプログラム構造化"
  ]
}