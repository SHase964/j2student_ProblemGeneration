{
  "problem_id": "No7.c",
  "difficulty": "7",
  "description": "与えられた2つの整数の配列（array1とarray2）を連結し、新たな配列を動的に生成して返す関数`concatenate_arrays`を作成してください。\n\n関数`concatenate_arrays`は、以下の引数を受け取ります。\n\n- `int *array1`: 1つ目の整数配列へのポインタ\n- `int size1`: 1つ目の配列の要素数\n- `int *array2`: 2つ目の整数配列へのポインタ\n- `int size2`: 2つ目の配列の要素数\n\n関数は、以下の処理を行います。\n\n1. 2つの配列の合計サイズを計算します。\n2. 合計サイズ分のメモリを動的に確保し、新しい配列を作成します。\n3. 1つ目の配列の要素を新しい配列にコピーします。\n4. 2つ目の配列の要素を新しい配列にコピーします。\n5. 新しく作成した配列へのポインタを返します。\n\n関数の戻り値は、新しく作成した配列へのポインタです。メモリ確保に失敗した場合は、NULLポインタを返します。\n\n注意：\n\n- 関数内で動的に確保したメモリは、呼び側で責任を持って解放する必要があります。\n- 配列の要素数は正の整数であると仮定します。",
  "reason": "学習者は、1次元配列と2次元配列の動的確保、要素へのアクセス、およびループ処理を理解している。また、文字列操作の基本的な理解も示している。次のステップとして、複数の配列を扱う操作、特に動的なメモリ管理を伴う配列の連結を課題とすることで、より複雑なメモリ操作とアルゴリズム設計能力を育成する。この問題は、`malloc`を用いたメモリ確保、配列のコピー、ポインタによる配列操作など、複数のスキルを組み合わせる必要があるため、難易度を7と設定した。",
  "examples": [
    {
      "input": "`array1` = {1, 2, 3}, `size1` = 3, `array2` = {4, 5, 6}, `size2` = 3",
      "output": "{1, 2, 3, 4, 5, 6}",
      "explanation": "2つの配列が連結され、新しい配列が作成される。"
    },
    {
      "input": "`array1` = {}, `size1` = 0, `array2` = {1, 2}, `size2` = 2",
      "output": "{1, 2}",
      "explanation": "空の配列と別の配列が連結される。"
    },
    {
      "input": "`array1` = {1, 2}, `size1` = 2, `array2` = {}, `size2` = 0",
      "output": "{1, 2}",
      "explanation": "別の配列と空の配列が連結される。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保",
    "配列操作",
    "ポインタ",
    "関数"
  ]
}