{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "可変個の文字列を引数として受け取り、それらを連結した1つの文字列を返す関数を作成してください。\n\n関数プロトタイプ:\n```c\nchar *concatenate_strings(int num_strings, ...);\n```\n\n- `num_strings`: 連結する文字列の数\n- `...`: 可変個の文字列 (char *) \n\nこの関数は、渡された文字列をすべて連結した新しい文字列を動的に割り当てて返します。\nメモリ不足が発生した場合、NULLポインタを返します。\nまた、可変個引数の処理には、stdarg.hの機能を使用してください。\n\n例:\n```c\nchar *result = concatenate_strings(3, \"Hello\", \", \", \"world!\");\nprintf(\"%s\\n\", result); // Output: Hello, world!\nfree(result); // 重要な点：動的に確保されたメモリの解放\n```",
  "reason": "学習者は、動的メモリ確保、配列操作、文字列操作、ポインタ操作について基本的な理解を示しています。\nNo4.cでは、動的配列の確保、要素へのアクセス、逆順出力、偶数出力といった操作を正しく実装できています。\nNo5.cでは、2次元配列の動的確保、要素へのアクセス、対角成分の和の計算、転置行列の作成といった、より複雑な操作も正しく行えています。\nNo6.cでは、文字列の長さ計算、動的メモリ確保を用いた文字列の連結といった操作を実装できています。\nこれらの解答から、学習者はポインタと配列の操作にある程度習熟していることがわかります。\n\n次のステップとして、可変個引数、文字列操作、メモリ管理を組み合わせた、より高度な問題に挑戦させることで、学習者の理解を深めることができると考えられます。\nこの問題は、stdarg.hライブラリの使用を促し、可変個引数の処理方法を学ぶ機会を提供します。また、文字列の連結と動的メモリ管理を組み合わせることで、より実践的なプログラミングスキルを養うことができます。",
  "examples": [
    {
      "input": "3, \"Hello\", \", \", \"world!\"",
      "output": "Hello, world!",
      "explanation": "3つの文字列\"Hello\", \", \", \"world!\"が連結されて\"Hello, world!\"が出力される。"
    },
    {
      "input": "2, \"C\", \"Programming\"",
      "output": "CProgramming",
      "explanation": "2つの文字列\"C\", \"Programming\"が連結されて\"CProgramming\"が出力される。"
    },
    {
      "input": "4, \"This\", \" \", \"is\", \" \", \"a\", \" \", \"test.\"",
      "output": "This is a test.",
      "explanation": "複数の文字列が連結されて\"This is a test.\"が出力される。"
    }
  ],
  "learning_objectives": [
    "可変個引数の理解と活用",
    "文字列連結の実装",
    "動的メモリ管理の理解",
    "stdarg.hライブラリの使用"
  ]
}