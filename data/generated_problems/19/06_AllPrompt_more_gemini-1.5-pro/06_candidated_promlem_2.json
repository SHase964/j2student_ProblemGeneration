{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を結合し、新しい配列を返す関数`merge_arrays`を作成してください。新しい配列は動的に確保し、元の配列の要素は昇順にソートされている必要があります。\n\n関数`merge_arrays`は3つの引数を取ります。\n1. `arr1`: 1つ目の整数の配列\n2. `size1`: `arr1`のサイズ\n3. `arr2`: 2つ目の整数の配列\n4. `size2`: `arr2`のサイズ\n\n関数は、結合されソートされた新しい配列へのポインタを返します。また、新しい配列のサイズを格納するためのポインタ`merged_size`も引数として受け取ります。\n\n例えば、`arr1`が`{1, 3, 5}`、`size1`が3、`arr2`が`{2, 4, 6}`、`size2`が3の場合、関数は`{1, 2, 3, 4, 5, 6}`を含む新しい配列へのポインタを返し、`merged_size`は6に設定されます。",
  "reason": "学習者は、動的メモリ割り当て、配列操作、および基本的なループ処理を理解していることがわかります。No4.cとNo5.cの問題を正しく解いており、ポインタと配列の操作に習熟していることを示しています。No6.cでは文字列操作と動的メモリ割り当てを組み合わせた問題を解いていますが、模範解答とは異なるアプローチをとっています。\n\nこの新しい問題は、学習者が既存のスキルを応用し、より複雑な問題を解決する能力を評価するために設計されています。2つの配列をマージしてソートするという課題は、ポインタ演算、配列操作、およびソートアルゴリズムの理解を深めるのに役立ちます。また、動的メモリ割り当てのスキルも試されます。",
  "examples": [
    {
      "input": "arr1 = {1, 3, 5}, size1 = 3, arr2 = {2, 4, 6}, size2 = 3",
      "output": "merged_array = {1, 2, 3, 4, 5, 6}, merged_size = 6",
      "explanation": "2つの配列`{1, 3, 5}`と`{2, 4, 6}`が結合され、ソートされて`{1, 2, 3, 4, 5, 6}`となります。"
    },
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3, arr2 = {4, 5, 6}, size2 = 3",
      "output": "merged_array = {1, 2, 3, 4, 5, 6}, merged_size = 6",
      "explanation": "すでにソートされている2つの配列が結合されます。"
    },
    {
      "input": "arr1 = {5, 3, 1}, size1 = 3, arr2 = {6, 4, 2}, size2 = 3",
      "output": "merged_array = {1, 2, 3, 4, 5, 6}, merged_size = 6",
      "explanation": "ソートされていない2つの配列がソートされ、結合されます。"
    }
  ],
  "learning_objectives": [
    "動的メモリ割り当て",
    "配列操作",
    "ポインタ演算",
    "ソートアルゴリズム"
  ]
}