{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 7,
    "description": "動的に確保した配列を用いて、整数の配列をソートするプログラムを作成してください。プログラムは以下の仕様を満たす必要があります。\n\n1. 標準入力から整数の数nを読み込み、それに基づいて配列を動的に確保する。\n2. 配列の各要素に0から99のランダムな整数を割り当て、これを表示する。\n3. 配列を昇順にソートし、ソートされた配列を表示する。\n4. メモリリークがないように、確保したメモリを適切に解放する。",
    "reason": "学習者は動的メモリアロケーションと基本的な配列操作に習熟していることが見受けられます。また、2次元配列の動的確保と操作、文字列結合の動的メモリ管理も理解しています。これらのスキルを踏まえ、配列操作を一歩進めて、ソートアルゴリズムの基礎を学ぶ問題を出題します。これは、配列の扱いにおける新たなスキルとして適切です。",
    "examples": [
      {
        "input": "5",
        "output": "Original: 45 12 78 34 89\nSorted: 12 34 45 78 89\n",
        "explanation": "5つの整数を持つ配列を作成し、ランダムな値を割り当てた後、昇順にソートして表示しています。"
      }
    ],
    "learning_objectives": [
      "動的メモリアロケーションの理解と使用",
      "基本的なソートアルゴリズムの実装",
      "配列操作（初期化、出力、ソート）",
      "メモリ管理の重要性とメモリリークの防止"
    ]
  },
  "reasoning": "この問題は、学習者の既存のスキルセットに適合しており、動的メモリ管理と配列操作の理解を深めることができます。さらに、ソートアルゴリズムの実装を通じて、アルゴリズム設計の基礎を学ぶことができ、学習者のスキルを次のレベルに引き上げるのに適しています。",
  "improvements": [
    "ソートアルゴリズムの選択肢を増やし、学習者が異なるアルゴリズムを比較できるようにする。",
    "メモリ管理の重要性を強調するために、メモリリークのデバッグ方法を追加する。",
    "配列のサイズを動的に変更する機能を追加し、より複雑なメモリ操作を学べるようにする。"
  ]
}