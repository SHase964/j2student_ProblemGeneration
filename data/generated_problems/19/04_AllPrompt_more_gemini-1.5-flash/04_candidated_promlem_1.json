{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "以下の仕様を満たすC言語プログラムを作成してください。\n\n**仕様:**\n\n1. ユーザーから任意の数の単語を入力させ、それらを動的に確保されたメモリ領域に格納します。単語の入力は、ユーザーが空行を入力するまで継続されます。\n2. 格納された単語をアルファベット順にソートします。\n3. ソートされた単語を標準出力に出力します。\n\n**制約:**\n\n* 単語は最大100文字までとします。\n* 単語の数は、メモリ容量が許す限り制限しません。\n* 文字列の比較には`strcmp`関数を使用してください。\n* メモリの動的確保には`malloc`と`realloc`を用い、`free`でメモリを解放してください。\n* 標準ライブラリ関数の使用は許可されています。\n\n**ヒント:**\n\n* 単語の格納には、動的にサイズを変更できる配列（`char **`型）を使用することを検討してください。\n* qsort関数を利用することで、ソート処理を効率的に行うことができます。",
  "reason": "学習者は、動的メモリ確保、配列、文字列操作、そしてソートアルゴリズムの理解度を評価するために、この問題を作成しました。過去の解答から、これらの概念の基本的な理解はできているものの、複数の概念を組み合わせた応用問題への対応に課題が見られたため、この問題の難易度は7としました。この問題は、文字列の動的配列への格納、qsort関数を使ったソート、そしてメモリ管理の適切な処理を要求することで、学習者の総合的なスキルを評価することを目的としています。",
  "examples": [
    {
      "input": "apple\nbanana\ncherry\n\n",
      "output": "apple\nbanana\ncherry\n",
      "explanation": "3つの単語を入力し、アルファベット順にソートして出力しています。"
    },
    {
      "input": "orange\ngrape\nkiwi\npear\n\n",
      "output": "grape\nkiwi\norange\npear\n",
      "explanation": "4つの単語を入力し、アルファベット順にソートして出力しています。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保と解放",
    "文字列の動的配列への格納",
    "qsort関数による文字列配列のソート",
    "strcmp関数を使った文字列の比較",
    "エラー処理"
  ]
}