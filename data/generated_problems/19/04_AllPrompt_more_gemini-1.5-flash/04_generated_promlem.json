{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 7,
    "description": "以下の仕様を満たすC言語プログラムを作成してください。\n\n**仕様:**\n\n1. ユーザーから任意の数の単語を入力させ、それらを動的に確保されたメモリ領域に格納します。単語の入力は、ユーザーが空行を入力するまで継続されます。\n2. 格納された単語をアルファベット順にソートします。\n3. ソートされた単語を標準出力に出力します。\n\n**制約:**\n\n* 単語は最大100文字までとします。\n* 単語の数は、メモリ容量が許す限り制限しません。\n* 文字列の比較には`strcmp`関数を使用してください。\n* メモリの動的確保には`malloc`と`realloc`を用い、`free`でメモリを解放してください。\n* 標準ライブラリ関数の使用は許可されています。\n\n**ヒント:**\n\n* 単語の格納には、動的にサイズを変更できる配列（`char **`型）を使用することを検討してください。\n* qsort関数を利用することで、ソート処理を効率的に行うことができます。",
    "reason": "この問題は、動的メモリ確保、配列、文字列操作、そしてソートアルゴリズムの理解度を評価するために、この問題を作成しました。動的メモリ確保と解放、realloc関数の使用、qsort関数を使ったソート処理、エラー処理など、複数の重要な概念を統合的に問うことができるため、学習効果が高いと考えられます。また、単語数を制限しないことで、より実践的な状況に対応できる能力を養うことができます。",
    "examples": [
      {
        "input": "apple\nbanana\ncherry\n\n",
        "output": "apple\nbanana\ncherry\n",
        "explanation": "3つの単語を入力し、アルファベット順にソートして出力しています。"
      },
      {
        "input": "orange\ngrape\nkiwi\npear\n\n",
        "output": "grape\nkiwi\norange\npear\n",
        "explanation": "4つの単語を入力し、アルファベット順にソートして出力しています。"
      }
    ],
    "learning_objectives": [
      "動的メモリ確保と解放",
      "文字列の動的配列への格納",
      "qsort関数による文字列配列のソート",
      "strcmp関数を使った文字列の比較",
      "realloc関数の使用",
      "エラー処理"
    ]
  },
  "reasoning": "3つの問題候補の中で、最も学習効果が高いと判断しました。動的メモリ確保、文字列操作、ソートアルゴリズムといった複数の重要な概念を統合的に問うことができ、学習者の理解度を多角的に評価できます。また、realloc関数の使用やエラー処理といった、より実践的なスキルも問うことができるため、学習者のスキル向上に大きく貢献すると考えられます。問題1は、単語数が制限されているため、実践的な状況への対応力が不足します。問題3は、文字列の逆順という、やや限定的な課題に焦点を当てているため、学習目標の網羅性が低いと考えられます。",
  "improvements": [
    "エラー処理に関する具体的な指示を追加する",
    "realloc関数の使用例を示すヒントを追加する",
    "メモリリークを防ぐための具体的な対策を記述する",
    "より複雑な入力例を追加する"
  ]
}