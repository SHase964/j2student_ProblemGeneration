{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 6,
    "description": "整数の配列を受け取り、その配列の各要素を2倍にして新しい配列に格納する関数を実装せよ。動的にメモリを確保し、元の配列と新しい配列の内容をそれぞれ出力すること。",
    "reason": "学習者は配列と動的メモリ管理を理解しており、基本的な配列操作ができることが確認できたため、関数を使った配列の操作に挑戦させることを目的とした。さらに、ポインタを使用することで、より深い理解を促進する。新しい概念として関数の戻り値と動的メモリの利用を導入する。",
    "examples": [
      {
        "input": "1 2 3 4 5\n",
        "output": "Original array: 1 2 3 4 5\nDoubled array: 2 4 6 8 10\n",
        "explanation": "入力値5は配列の要素数を示し、続く1 2 3 4 5はその要素を表す。出力では元の配列と、各要素が2倍になった新しい配列を示す。"
      }
    ],
    "learning_objectives": [
      "動的メモリの確保と解放の理解",
      "関数を用いた配列操作の実践",
      "ポインタを用いた配列参照の理解",
      "配列の要素を操作する方法の習得"
    ]
  },
  "reasoning": "この問題は、学習者が配列とポインタの基本的な理解を持っていることを前提に、動的メモリ管理と関数の使用を組み合わせた内容であり、学習者の成長を促進するために適切です。特に、元の配列と新しい配列の両方を出力することで、学習者はメモリ管理の重要性を実感しやすくなります。",
  "improvements": [
    "問題文に具体的な制約（例えば、配列のサイズが1以上であることなど）を追加すると、より明確になる。",
    "動的メモリの解放に関する注意点を問題文に記載し、学習者が忘れないように促す。",
    "テストケースを増やして、さまざまな入力に対する出力を確認できるようにする。"
  ]
}