{
  "selected_problem": {
    "problem_id": "No7.c_revised",
    "difficulty": 7,
    "description": "与えられた文字列を、単語ごとに逆順に並べ替えるプログラムを作成してください。例えば、入力文字列が\"This is a sample sentence.\" の場合、出力は \"sentence. sample a is This\" となります。単語の区切り文字は空白と句読点（.,!?）とします。ただし、句読点は単語に含めて逆順に並べ替えます。動的メモリ確保を用いてください。メモリリークを防ぐために、動的に確保したメモリは必ず解放してください。エラー処理は不要です。",
    "reason": "この問題は、文字列操作、動的メモリ管理、アルゴリズム設計といった複数の重要な概念を統合的に問うため、学習効果が高いと判断しました。文字列の分割、逆順への並べ替えといったアルゴリズム設計の要素に加え、動的メモリ管理の適切な実装が求められるため、学習者の理解度を効果的に評価できます。難易度7は、これらの要素の複雑さと実装の難易度を考慮したものです。",
    "examples": [
      {
        "input": "This is a sample sentence.",
        "output": "sentence. sample a is This",
        "explanation": "入力文字列を単語に分割し、単語の順番を逆順にして出力します。句読点も単語の一部として扱います。"
      },
      {
        "input": "Hello, world! This is a test.",
        "output": "test. a is This world! Hello,",
        "explanation": "複数の句読点を含む場合の例です。"
      }
    ],
    "learning_objectives": [
      "文字列の分割",
      "動的メモリ確保と解放",
      "ポインタ演算",
      "文字列操作",
      "アルゴリズム設計",
      "メモリリークの防止"
    ]
  },
  "reasoning": "3つの問題候補を比較検討した結果、2番目の問題が学習者の能力と最も適合すると判断しました。ファイル入出力やエラー処理は重要な概念ですが、この段階では、文字列操作と動的メモリ管理に焦点を当てた方が、学習効果が高いと考えられます。また、コマンドライン引数の処理は、この問題の学習目標から外れるため、より本質的な課題に集中できるよう、簡略化しました。",
  "improvements": [
    "問題文に、句読点を単語に含めることを明確に記述しました。",
    "出力例に、複数の句読点を含むケースを追加しました。",
    "メモリリークの防止を、問題文に明記しました。",
    "エラー処理を不要としました。学習目標を絞り、問題の難易度を適切に保つためです。"
  ]
}