{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "可変個の文字列を連結する関数を作成しなさい。\n関数は、文字列の配列へのポインタと、配列のサイズを引数として受け取ります。\n例えば、char *str_arr[] = {\"This\", \"is\", \"a\", \"pen\"}; を入力とし、配列のサイズ4を渡すと、\"Thisisapen\" を返します。\nすべての文字列を連結した結果を格納するのに十分な大きさのメモリを動的に割り当て、連結された文字列へのポインタを返すようにしてください。\nまた、メモリリークを防ぐために、不要になったメモリは適切に解放してください。\nなお、文字列配列へのポインタを使う際は、以下のように宣言すると2次元配列と同様に扱えるため、この形式で解答すること。\nchar *str[n]; // nは配列のサイズ",
  "reason": "学習者は、単一の文字列の連結、動的メモリ確保、配列操作、ポインタ操作を理解している。そこで、これらのスキルを組み合わせ、より複雑な文字列操作を必要とする応用的な問題を設計した。可変個の文字列の連結は、現実世界のプログラミングで頻繁に遭遇する課題であり、この問題を通じて、学習者は文字列操作、メモリ管理、およびコードの効率性についてより深い理解を得ることができる。",
  "examples": [
    {
      "input": "char *str_arr[] = {\"Pro\", \"gram\", \"ming\"};\nint size = 3;",
      "output": "\"Programming\"",
      "explanation": "3つの文字列\"Pro\", \"gram\", \"ming\"が連結されて\"Programming\"が出力される。"
    },
    {
      "input": "char *str_arr[] = {\"Hello\", \",\", \"world\", \"!\"};\nint size = 4;",
      "output": "\"Hello,world!\"",
      "explanation": "4つの文字列\"Hello\", \",\", \"world\", \"!\"が連結されて\"Hello,world!\"が出力される。"
    }
  ],
  "learning_objectives": [
    "可変個の引数の処理",
    "文字列の動的メモリ確保",
    "メモリリークの防止",
    "効率的な文字列連結",
    "ポインタ配列の操作"
  ]
}