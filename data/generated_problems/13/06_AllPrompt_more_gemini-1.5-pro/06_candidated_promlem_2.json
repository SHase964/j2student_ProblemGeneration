{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を結合し、新しい配列を返す関数を作成してください。\n\n関数 `merge_arrays` は以下の仕様を満たす必要があります。\n\n* 2つの整数の配列 `arr1` と `arr2`、それぞれの要素数 `size1` と `size2` を引数として受け取ります。\n* `arr1` と `arr2` のすべての要素を含む新しい配列を動的に作成し、その先頭へのポインタを返します。\n* 新しい配列の要素は、`arr1` の要素の後に `arr2` の要素が続くように配置されるものとします。\n* 関数内で動的にメモリを割り当てた場合は、呼び出し側で `free` 関数を使用してメモリを解放する必要があることに注意してください。\n\n例えば、`arr1` が `{1, 2, 3}`、`size1` が 3、`arr2` が `{4, 5, 6}`、`size2` が 3 の場合、関数は `{1, 2, 3, 4, 5, 6}` を含む新しい配列へのポインタを返す必要があります。",
  "reason": "学習者は、動的配列確保、配列操作、ポインタ、ループ、関数定義など、C言語の重要な概念を理解し、正しく使用しています。No4.cとNo5.cでは、動的配列確保を用いて配列を操作し、ループや条件分岐を適切に使用しています。また、No6.cでは、文字列操作と動的メモリ確保を組み合わせています。これらの解答から、学習者はC言語の基本的な概念を理解していると考えられます。\n\nこの新しい問題は、学習者が既存の知識を応用し、より複雑な問題に挑戦できるように設計されています。2つの配列を結合するタスクは、配列操作、ポインタ操作、動的メモリ管理といった複数の概念を組み合わせる必要があるため、学習者の理解度をさらに深めるのに役立ちます。また、この問題は、実際のプログラミングでよく遭遇するタスクであり、実践的なスキルを養う上でも効果的です。",
  "examples": [
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3, arr2 = {4, 5, 6}, size2 = 3",
      "output": "{1, 2, 3, 4, 5, 6}",
      "explanation": "2つの配列`arr1`と`arr2`が結合され、新しい配列が作成されます。"
    },
    {
      "input": "arr1 = {10, 20}, size1 = 2, arr2 = {30, 40, 50}, size2 = 3",
      "output": "{10, 20, 30, 40, 50}",
      "explanation": "異なるサイズの配列も正しく結合されます。"
    },
    {
      "input": "arr1 = {}, size1 = 0, arr2 = {100, 200}, size2 = 2",
      "output": "{100, 200}",
      "explanation": "空の配列を扱うこともできます。"
    }
  ],
  "learning_objectives": [
    "動的メモリ割り当ての理解",
    "ポインタの操作",
    "配列の操作",
    "関数定義の理解"
  ]
}