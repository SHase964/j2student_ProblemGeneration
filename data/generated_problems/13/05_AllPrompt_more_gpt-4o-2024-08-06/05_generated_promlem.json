{
  "selected_problem": {
    "problem_id": "AdvancedArrayManipulation1",
    "difficulty": 7,
    "description": "動的に確保した整数配列を用いて、以下の操作を行うプログラムを作成してください。(1)キーボードから正の整数を入力し、その数の要素を持つ配列を動的に確保してください。(2)配列の各要素に対して、インデックスに基づいた計算を行い、その結果を格納してください（例えば、要素iにはi*iを格納）(3)配列の要素を昇順にソートして表示してください。(4)配列の要素の中で、ユーザーが指定した値に最も近い値を探し、そのインデックスを表示してください。",
    "reason": "学習者は動的メモリ確保、配列操作、文字列操作の基本的な理解を示しています。特に、配列の動的確保と基本的なループ処理には習熟していますが、ソートや検索アルゴリズムの実装経験は不足していると考えられます。この問題では、既存の理解を活用しつつ、新たにソートと線形探索の理解を深めることを目的としています。",
    "examples": [
      {
        "input": "5\n2",
        "output": "0 1 4 9 16\nIndex: 1",
        "explanation": "入力に基づいて配列を動的に確保し、0, 1, 4, 9, 16を計算して格納。ユーザー指定の値2に最も近いのは1で、インデックスは1。"
      }
    ],
    "learning_objectives": [
      "動的メモリの確保と解放",
      "配列の操作（特にインデックスを使った計算）",
      "ソートアルゴリズムの実装",
      "線形探索を用いた近似値の検索"
    ]
  },
  "reasoning": "この問題は、学習者の現在のスキルセットに最も適しており、既存の知識を活用しながら新しい概念（ソートと線形探索）を学ぶ機会を提供します。問題の難易度は学習者の能力に対して適切であり、学習目標も明確です。また、問題の一貫性が保たれており、実装可能性も高いです。",
  "improvements": [
    "ソートアルゴリズムの選択肢を明示し、バブルソートや選択ソートなどの具体的なアルゴリズムを提案する。",
    "線形探索の代わりに、二分探索を用いることで効率的な検索方法を学ぶ機会を提供する。",
    "配列のサイズやユーザー入力のバリデーションを追加し、より堅牢なプログラムを作成することを促す。"
  ]
}