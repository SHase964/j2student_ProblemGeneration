{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 6,
    "description": "整数の配列を受け取り、その配列の中で最も頻繁に出現する要素を返す関数を実装してください。ただし、動的に配列を確保し、各要素の出現回数をカウントするための補助的な配列も動的に確保すること。",
    "reason": "学習者は配列や動的メモリの使用に慣れており、基本的なデータ構造の操作ができることがわかりました。この問題は、頻出要素の計算という新しい概念を導入し、既存の知識（配列の操作、動的メモリ管理）を活用することが求められます。",
    "examples": [
      {
        "input": "5\n1 2 3 2 1\n",
        "output": "1\n",
        "explanation": "配列の中で1が最も頻繁に出現しているため、1が返される。"
      },
      {
        "input": "6\n4 4 2 2 2 3\n",
        "output": "2\n",
        "explanation": "配列の中で2が最も頻繁に出現しているため、2が返される。"
      }
    ],
    "learning_objectives": [
      "動的メモリ確保の理解と実装",
      "配列の頻出要素を計算するアルゴリズムの実装",
      "出現回数をカウントするための補助的なデータ構造の使用",
      "関数の引数として配列を渡す技術"
    ]
  },
  "reasoning": "この問題は、学習者が既に持っている知識を活かしつつ、新しい概念である頻出要素の計算を学ぶことができるため、適切です。また、動的メモリ管理のスキルをさらに磨くことができる点も評価されます。",
  "improvements": [
    "問題文に具体的な制約（例えば、配列のサイズや要素の範囲）を追加することで、実装の際の明確さを向上させる。",
    "出現回数が同じ場合の処理についての説明を追加し、学習者が考慮すべき点を明確にする。",
    "サンプルの入力例を増やし、より多様なケースを提示することで、学習者の理解を深める。"
  ]
}