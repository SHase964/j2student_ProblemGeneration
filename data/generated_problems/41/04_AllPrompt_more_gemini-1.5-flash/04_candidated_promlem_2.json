{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "以下の仕様を満たすC言語プログラムを作成してください。\n\n**仕様**\n\n1. プログラムは、コマンドライン引数として与えられた複数のファイル名を受け取ります。ファイル名はスペースで区切られています。\n2. 各ファイルを読み込み、ファイル内の行数をカウントします。\n3. 各ファイルのファイル名とその行数を標準出力に出力します。\n4. すべてのファイルの行数の合計を計算し、標準出力に出力します。\n5. ファイルの読み込みに失敗した場合、エラーメッセージを表示し、プログラムを終了します。\n6. メモリリークが発生しないように、動的に確保したメモリは解放してください。\n\n**例**\n\nコマンドライン引数: file1.txt file2.txt file3.txt\n\nfile1.txt: 10行\nfile2.txt: 5行\nfile3.txt: 12行\n合計行数: 27行\n\n**ヒント**\n\n* `argc`と`argv`を使用します。\n* `fopen`、`fgets`、`fclose`などのファイル操作関数を使用します。\n* `malloc`と`free`を使用してメモリを動的に管理します。\n* エラー処理を適切に行い、エラー発生時には`perror`関数を使用してエラーメッセージを出力します。",
  "reason": "学習者は動的メモリ確保と配列操作、ファイル入出力の基本的な理解を示していますが、コマンドライン引数の処理、エラー処理、複数のファイルの処理といった、より高度なスキルを習得する必要があります。この問題は、これらのスキルを統合的に活用する必要があるため、適切な難易度と学習効果が期待できます。また、ファイル操作は実践的なプログラミングスキルであり、学習意欲を高めるのに役立つと考えられます。",
  "examples": [
    {
      "input": "file1.txt file2.txt",
      "output": "file1.txt: 5行\nfile2.txt: 10行\n合計行数: 15行",
      "explanation": "file1.txtが5行、file2.txtが10行のファイルであった場合の出力例です。"
    },
    {
      "input": "no_such_file.txt",
      "output": "Error opening file: no_such_file.txt",
      "explanation": "存在しないファイルが指定された場合のエラーメッセージ出力例です。"
    }
  ],
  "learning_objectives": [
    "コマンドライン引数の処理",
    "ファイル入出力",
    "エラー処理",
    "動的メモリ管理",
    "複数のファイルの処理",
    "標準出力への出力"
  ]
}