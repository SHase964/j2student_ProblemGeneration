{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を連結し、新しい配列を返す関数を実装してください。\n\n例えば、配列1が[1, 2, 3]で、配列2が[4, 5, 6]の場合、連結された配列は[1, 2, 3, 4, 5, 6]となります。\n\n関数は以下の仕様を満たす必要があります。\n\n1. 2つの配列とそれぞれのサイズを引数として受け取ります。\n2. 新しい配列を動的に確保し、連結された結果を格納します。\n3. 連結された配列へのポインタを返します。\n4. エラー処理を行い、メモリ確保に失敗した場合はNULLポインタを返します。\n\n関数の実装に加えて、以下の項目も実装してください。\n\n1. main関数で2つの配列を初期化し、連結関数を呼び出します。\n2. 連結された配列の内容を表示します。\n3. 動的に確保したメモリを解放します。",
  "reason": "学習者はNo4.cで動的メモリ確保と配列操作の基本を理解しているものの、No5.cとNo6.cは未解答です。No4.cのコードを見ると、mallocは使用しているものの、sizeof演算子やfree関数の使用、適切な型のキャスト、乱数の生成方法などに課題が見られます。また、配列の要素へのアクセス方法も理解が不十分です。\n\nこの問題では、No4.cで学習した動的メモリ確保と配列操作の知識をさらに発展させ、2つの配列を連結する応用的な課題に取り組むことで、より深い理解を目指します。また、メモリ管理の重要性を理解するために、動的に確保したメモリの解放も必須としています。\n\nこの問題は、No5.cの2次元配列やNo6.cの文字列操作といった複雑な概念を避けつつ、No4.cで触れた動的メモリ確保と配列操作に焦点を当て、適切な難易度上昇を実現しています。",
  "examples": [
    {
      "input": "配列1: [1, 2, 3]\n配列2: [4, 5, 6]",
      "output": "[1, 2, 3, 4, 5, 6]",
      "explanation": "2つの配列が正しく連結されていることを示しています。"
    },
    {
      "input": "配列1: []\n配列2: [1, 2, 3]",
      "output": "[1, 2, 3]",
      "explanation": "空の配列との連結も正しく処理されることを示しています。"
    },
    {
      "input": "配列1: [1, 2, 3]\n配列2: []",
      "output": "[1, 2, 3]",
      "explanation": "空の配列との連結も正しく処理されることを示しています。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保の理解",
    "配列操作の習熟",
    "ポインタの理解",
    "メモリ管理の理解",
    "エラー処理の実装"
  ]
}