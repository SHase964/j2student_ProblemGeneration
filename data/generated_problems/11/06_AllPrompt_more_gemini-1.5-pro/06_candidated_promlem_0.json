{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた２つの整数の配列（array1, array2）を結合し、新たな配列を動的に生成して返す関数`merge_array`を作成してください。\n- array1とarray2はそれぞれ異なるサイズを持つことができます。\n- 新たな配列は、array1の要素の後にarray2の要素が続くように結合してください。\n- 関数は、結合後の配列へのポインタと、結合後の配列のサイズを返す必要があります。\n- 関数の戻り値は構造体を使用し、構造体のメンバとして、結合後の配列へのポインタと、結合後の配列のサイズを含めるようにしてください。\n- main関数では、キーボードから2つの配列のサイズを入力し、各配列の要素を0〜99の範囲の乱数で初期化してください。\n- `merge_array`関数を呼び出して配列を結合し、結果を表示した後、動的に確保したメモリを解放してください。",
  "reason": "学習者は1次元配列の動的確保と操作、およびループ処理には習熟しているものの、2次元配列や文字列操作、特にポインタの活用に課題が見られます。\nこの問題では、1次元配列の知識を応用しつつ、関数からの構造体の返却、メモリ管理、複数の配列の操作を組み合わせることで、より複雑な問題への対応能力を養成します。\nまた、構造体の使用を導入することで、データ構造の理解を深めることができます。\nさらに、動的メモリ確保と解放を必須とすることで、メモリ管理の重要性を再認識させます。",
  "examples": [
    {
      "input": "配列1のサイズ：5\n配列2のサイズ：3\n配列1の要素：1 2 3 4 5\n配列2の要素：6 7 8",
      "output": "結合後の配列：1 2 3 4 5 6 7 8\n結合後の配列のサイズ：8",
      "explanation": "5要素の配列1と3要素の配列2が正しく結合され、8要素の配列が生成されています。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保と解放",
    "構造体の使用",
    "配列操作",
    "ポインタの理解",
    "関数からの構造体の返却"
  ]
}