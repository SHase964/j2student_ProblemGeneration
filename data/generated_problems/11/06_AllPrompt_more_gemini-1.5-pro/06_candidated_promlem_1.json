{
  "problem_id": "No7.c",
  "difficulty": 6,
  "description": "与えられた2つの整数の配列を結合し、新しい配列を作成する関数`merge_arrays`を実装してください。\n\n関数`merge_arrays`は、以下の引数を受け取ります。\n\n- `arr1`: 1つ目の整数配列\n- `size1`: `arr1`の要素数\n- `arr2`: 2つ目の整数配列\n- `size2`: `arr2`の要素数\n\n関数`merge_arrays`は、`arr1`と`arr2`を結合した新しい配列を動的に確保し、そのポインタを返します。新しい配列のサイズは`size1 + size2`です。\n\nまた、main関数で以下の処理を実行してください。\n\n1. 2つの配列`arr1`、`arr2`を宣言し、それぞれに任意の整数を格納する。\n2. `merge_arrays`関数を呼び出し、結合された配列のポインタを受け取る。\n3. 結合された配列の内容を表示する。\n4. 動的に確保したメモリを解放する。",
  "reason": "学習者は、1次元配列の動的確保、要素へのアクセス、および出力に成功しています。しかし、No5.cとNo6.cは未解答であり、2次元配列や文字列操作、ポインタのより高度な理解が必要です。この問題は、1次元配列の知識を基盤に、動的メモリ確保とポインタ操作の理解を深めるためのステップとして設計されています。2つの配列を扱うことで、より複雑な操作を学ぶ準備となります。",
  "examples": [
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3\narr2 = {4, 5, 6}, size2 = 3",
      "output": "1 2 3 4 5 6",
      "explanation": "arr1とarr2が結合され、新しい配列{1, 2, 3, 4, 5, 6}が作成されます。"
    },
    {
      "input": "arr1 = {10, 20}, size1 = 2\narr2 = {30, 40, 50}, size2 = 3",
      "output": "10 20 30 40 50",
      "explanation": "arr1とarr2が結合され、新しい配列{10, 20, 30, 40, 50}が作成されます。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保の理解",
    "ポインタ操作",
    "配列操作",
    "関数定義と呼び出し"
  ]
}