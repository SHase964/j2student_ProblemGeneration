{
  "problem_id": "No7.c",
  "difficulty": "7",
  "description": "与えられた２つの整数の配列（pt1, pt2）を結合し、新たな配列を動的に生成して返す関数`merge_arrays`を作成してください。生成した配列は、昇順にソートされている必要があります。\n\n関数`merge_arrays`は、以下の引数を受け取ります。\n- `pt1`: 1つ目の整数の配列へのポインタ\n- `size1`: 1つ目の配列のサイズ\n- `pt2`: 2つ目の整数の配列へのポインタ\n- `size2`: 2つ目の配列のサイズ\n\n関数は、以下の処理を行う必要があります。\n1. 新たな配列を動的に確保し、`pt1`と`pt2`の要素をコピーします。\n2. 新たな配列を昇順にソートします。\n3. ソートされた新たな配列へのポインタを返します。\n\n`main`関数では、`merge_arrays`関数を呼び出し、結果を検証するコードを含めてください。\n\n例えば、`pt1`が`{1, 3, 5}`、`pt2`が`{2, 4, 6}`の場合、返される配列は`{1, 2, 3, 4, 5, 6}`となります。",
  "reason": "学習者は、動的配列の確保、配列要素の操作、および基本的なループ処理を理解していることが、No4.cとNo5.cの解答から示唆されています。しかし、No6.cの解答では、文字列操作とポインタ操作に課題が見られました。そこで、この問題は、配列とポインタ操作の理解をさらに深めるために設計されています。\n\n具体的には、以下のスキルが評価されます。\n- 異なるサイズの配列を扱う能力\n- 動的なメモリ確保と解放\n- ソートアルゴリズムの理解と実装（単純なソートで十分）\n- ポインタを用いた配列操作\n\nこの問題は、No4.cとNo5.cで示された基本的な配列操作の理解を基に、より複雑な操作とアルゴリズムの適用を促すものです。",
  "examples": [
    {
      "input": "pt1 = {1, 3, 5}, size1 = 3, pt2 = {2, 4, 6}, size2 = 3",
      "output": "{1, 2, 3, 4, 5, 6}",
      "explanation": "2つの配列が結合され、昇順にソートされています。"
    },
    {
      "input": "pt1 = {5, 2, 8}, size1 = 3, pt2 = {1, 7, 3}, size2 = 3",
      "output": "{1, 2, 3, 5, 7, 8}",
      "explanation": "要素が重複しない場合でも、正しくソートされている必要があります。"
    },
    {
      "input": "pt1 = {1, 2, 3}, size1 = 3, pt2 = {1, 2, 3}, size2 = 3",
      "output": "{1, 1, 2, 2, 3, 3}",
      "explanation": "要素が重複する場合でも、正しくソートされている必要があります。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保",
    "配列操作",
    "ポインタ操作",
    "ソートアルゴリズム"
  ]
}