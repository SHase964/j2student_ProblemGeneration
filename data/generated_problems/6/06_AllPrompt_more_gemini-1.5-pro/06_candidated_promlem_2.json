{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列（array1とarray2）を結合し、新しい配列を作成する関数`merge_arrays`を実装してください。\n\n関数`merge_arrays`は、以下の引数を受け取ります。\n\n- `array1`: 整数の配列\n- `size1`: `array1`のサイズ\n- `array2`: 整数の配列\n- `size2`: `array2`のサイズ\n\n関数`merge_arrays`は、`array1`と`array2`を結合した新しい配列へのポインタを返します。新しい配列は、`array1`の要素の後に`array2`の要素が続くように作成してください。\n\nまた、この関数を用いて、キーボードから入力された2つの配列を結合し、結果を表示するmain関数を作成してください。\n\n動的メモリ確保を用いて、必要なメモリを確保し、不要になったメモリは必ず解放してください。",
  "reason": "学習者は、No4.cとNo5.cの問題において、動的メモリ確保、配列操作、ポインタ操作、forループとif文による制御構造を正しく使用できています。また、No6.cの問題では、文字列操作とポインタ操作に挑戦していますが、メモリ確保と解放、ポインタ変数の操作に課題が見られます。\n\nこの問題では、No4.cとNo5.cで示された配列とポインタの理解をさらに深め、No6.cで見られた課題を克服するために、2つの配列を結合する問題を提示します。\n\nこの問題は、以下の点で学習者の能力向上を促します。\n\n- 2つの配列を扱うことで、ポインタと配列の操作スキルを強化\n- 動的メモリ確保と解放を適切に行うことでメモリ管理の理解を深化\n- 関数を通して配列を操作することで、関数とポインタの連携を理解\n- より複雑な問題への挑戦を通して、問題解決能力を向上",
  "examples": [
    {
      "input": "配列1: 1 2 3\n配列2: 4 5 6",
      "output": "結合された配列: 1 2 3 4 5 6",
      "explanation": "2つの配列が正しく結合されていることを示しています。"
    },
    {
      "input": "配列1: 10 20 30 40\n配列2: 50 60",
      "output": "結合された配列: 10 20 30 40 50 60",
      "explanation": "異なるサイズの配列も正しく結合できることを示しています。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保と解放",
    "ポインタと配列の操作",
    "関数とポインタの連携",
    "問題解決能力の向上"
  ]
}