{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列を結合し、新しい配列を返す関数を作成してください。\n\n関数 `merge_arrays` は以下の仕様を満たす必要があります:\n\n* 2つの整数の配列 `arr1` と `arr2`、それぞれの配列のサイズ `size1` と `size2` を引数として受け取ります。\n* `arr1` と `arr2` のすべての要素を含む新しい配列を動的に割り当てて作成します。\n* 新しい配列の先頭には `arr1` の要素が、その後に `arr2` の要素が配置されるようにコピーします。\n* 新しい配列へのポインタと、新しい配列のサイズを格納した変数へのポインタを返します。\n* エラーが発生した場合（例えば、メモリ割り当てに失敗した場合）は、`NULL` を返し、サイズのポインタには 0 を格納します。\n\n新しい配列のサイズは `size1 + size2` になります。\n\n関数のプロトタイプは以下の通りです:\n\n```c\nint *merge_arrays(int arr1[], int size1, int arr2[], int size2, int *merged_size);\n```",
  "reason": "学習者は、No4.cで動的メモリ割り当て、配列操作、ループ処理、条件分岐を正しく使用できています。No5.cでは、2次元配列の動的メモリ割り当てに課題があり、未完成ですが、行の確保はできています。No6.cは未解答です。\n\nこれらのことから、学習者は1次元配列の操作にはある程度の習熟度があると判断できますが、2次元配列や文字列操作にはまだ課題が見られます。そこで、1次元配列を題材にしつつ、No6.cで未解答だった文字列操作の要素も一部含めた応用問題として、2つの配列を結合する問題を提示します。これにより、動的メモリ割り当て、配列操作、ポインタ操作、サイズ計算といった複数の概念を組み合わせた応用能力を養成できます。\n\nまた、エラー処理も組み込むことで、より実践的なプログラミング能力を育成することを目指します。",
  "examples": [
    {
      "input": "arr1 = {1, 2, 3}, size1 = 3\narr2 = {4, 5, 6}, size2 = 3",
      "output": "merged_array = {1, 2, 3, 4, 5, 6}, merged_size = 6",
      "explanation": "2つの配列 `arr1` と `arr2` が結合され、新しい配列 `merged_array` が作成されます。`merged_size` には新しい配列のサイズが格納されます。"
    },
    {
      "input": "arr1 = {}, size1 = 0\narr2 = {1, 2}, size2 = 2",
      "output": "merged_array = {1, 2}, merged_size = 2",
      "explanation": "空の配列と別の配列が結合されます。"
    },
    {
      "input": "arr1 = {1, 2}, size1 = 2\narr2 = {}, size2 = 0",
      "output": "merged_array = {1, 2}, merged_size = 2",
      "explanation": "別の配列と空の配列が結合されます。"
    }
  ],
  "learning_objectives": [
    "動的メモリ割り当て",
    "配列操作",
    "ポインタ操作",
    "サイズ計算",
    "エラー処理"
  ]
}