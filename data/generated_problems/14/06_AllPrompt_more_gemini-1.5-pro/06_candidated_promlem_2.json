{
  "problem_id": "No7.c",
  "difficulty": 6,
  "description": "与えられた文字列を逆順にする関数を作成し、その関数を用いて文字列を逆順に出力するプログラムを作成しなさい。\nただし、文字列を逆順にする際に、元の文字列を変更せずに、新しい文字列を作成して格納し、そのポインタを返すように実装すること。\n例えば、\"Kisarazu\"という文字列を入力すると、\"uzarasiK\"という文字列を返す。",
  "reason": "学習者は、No4.cとNo5.cにおいて、配列とポインタの基本的な操作、動的メモリ確保、制御構文の使用など、C言語の基礎的なスキルを示しています。No5.cでは2次元配列の操作も正しく行えており、配列操作への理解が一定レベルに達していると考えられます。しかし、No6.cは未解答であり、文字列操作、特に文字列の結合や動的メモリ確保を用いた文字列処理に課題があることが示唆されます。\n\nこの問題では、No6.cの文字列操作をより深く理解するために、文字列の逆順処理を扱います。これは、ポインタ操作、文字列終端の処理、動的メモリ確保といった複数の要素を組み合わせる必要があり、No4.cとNo5.cで示されたスキルを発展させるのに適しています。さらに、元の文字列を変更せずに新しい文字列を作成するという制約を設けることで、メモリ管理の理解度も評価できます。\n\nこの問題は、No6.cの未解答部分の理解を促進すると同時に、No4.cとNo5.cで示された配列操作のスキルを文字列操作という新たな文脈で応用する機会を提供します。これにより、学習者はより複雑な文字列操作への足掛かりを得ることができると考えられます。",
  "examples": [
    {
      "input": "\"Kisarazu\"",
      "output": "\"uzarasiK\"",
      "explanation": "入力文字列\"Kisarazu\"が逆順になり、\"uzarasiK\"が出力される。"
    },
    {
      "input": "\"Hello\"",
      "output": "\"olleH\"",
      "explanation": "入力文字列\"Hello\"が逆順になり、\"olleH\"が出力される。"
    },
    {
      "input": "\"12345\"",
      "output": "\"54321\"",
      "explanation": "入力文字列\"12345\"が逆順になり、\"54321\"が出力される。"
    }
  ],
  "learning_objectives": [
    "ポインタを用いた文字列操作",
    "動的メモリ確保",
    "文字列終端文字'\\0'の適切な処理",
    "関数定義と呼び出し",
    "文字列操作におけるメモリ管理の理解"
  ]
}