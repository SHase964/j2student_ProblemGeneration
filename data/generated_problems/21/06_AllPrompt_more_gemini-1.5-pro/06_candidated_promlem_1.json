{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "可変長の文字列を複数入力し、それらを連結した1つの文字列を返す関数を作成してください。\n\n関数仕様は以下の通りです。\n\n```c\nchar *concatenate_strings(int num_strings, ...);\n```\n\n- `num_strings`: 連結する文字列の数\n- `...`: 連結する文字列 (char *)。可変個引数\n- 戻り値: 連結された文字列へのポインタ。メモリは動的に確保すること。\n\n入力文字列はNULL終端文字列とします。また、`num_strings`は0以上とします。`num_strings`が0の場合は、空文字列を返すようにしてください。\n\nメモリリークを防ぐため、不要になったメモリは適切に解放してください。",
  "reason": "学習者は、No4.c、No5.c、No6.cの問題を解答しており、動的メモリ確保、配列、ポインタ、文字列操作、制御構文などの基本的な概念を理解している。\n\nNo6.cでは、2つの文字列の連結を実装しており、文字列操作と動的メモリ確保を組み合わせた処理を記述できている。\n\nこの問題では、No6.cの応用として、可変個引数と動的メモリ確保を組み合わせ、より複雑な文字列操作を要求することで、学習者の理解度をさらに深めることを目的としている。可変個引数の理解は、C言語における関数引数の高度な活用を学ぶ上で重要となる。",
  "examples": [
    {
      "input": "3, \"apple\", \"banana\", \"orange\"",
      "output": "applebananaorange",
      "explanation": "3つの文字列\"apple\"、\"banana\"、\"orange\"を連結した結果"
    },
    {
      "input": "0",
      "output": "",
      "explanation": "文字列数が0の場合は空文字列"
    },
    {
      "input": "1, \"hello\"",
      "output": "hello",
      "explanation": "1つの文字列\"hello\"が入力された場合"
    }
  ],
  "learning_objectives": [
    "可変個引数の理解と使用",
    "動的メモリ確保",
    "文字列操作",
    "メモリリークの防止"
  ]
}