{
  "selected_problem": {
    "problem_id": "No7.c",
    "difficulty": 6,
    "description": "ユーザーから入力された整数の配列を受け取り、その配列の要素の中央値を計算するプログラムを作成しなさい。配列は動的に確保し、ソートのためにクイックソートアルゴリズムを実装し、中央値を求める際には配列のサイズが偶数の場合と奇数の場合で異なる処理を行うこと。",
    "reason": "学習者は動的メモリ確保や配列の操作に関して基本的な理解を示しており、クイックソートのような新しいアルゴリズムを導入し、中央値の計算という新しい概念を学ぶことで、より高度なプログラミング技術を習得することが期待される。",
    "examples": [
      {
        "input": "3 1 4 2 5",
        "output": "中央値は3です。",
        "explanation": "入力された数値の配列[3, 1, 4, 2, 5]をソートすると[1, 2, 3, 4, 5]となり、中央値は3です。"
      },
      {
        "input": "6\n10 20 30 40 50 60",
        "output": "中央値は35です。",
        "explanation": "入力された数値の配列[10, 20, 30, 40, 50, 60]をソートすると[10, 20, 30, 40, 50, 60]となり、中央値は(30+40)/2で35です。"
      }
    ],
    "learning_objectives": [
      "動的メモリ確保の理解",
      "配列のソートアルゴリズムの実装",
      "中央値の計算手法の理解",
      "ポインタを用いた配列の操作"
    ]
  },
  "reasoning": "この問題は、学習者が動的メモリ確保や配列の操作に関する基本的な理解を持っていることを前提に、より高度なプログラミング技術を学ぶための良い機会を提供します。特に、クイックソートを実装することで、アルゴリズムの理解を深めることができ、中央値の計算を通じて条件分岐の実践的な応用も学べます。",
  "improvements": [
    "問題文に具体的な入力形式や制約を明記することで、学習者がより明確に理解できるようにする。",
    "クイックソートの実装に関するヒントやサンプルコードを提供することで、学習者の実装をサポートする。",
    "中央値の計算方法について、具体的な例を増やして理解を深めるための補足情報を提供する。"
  ]
}