{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "以下の仕様を満たすC言語プログラムを作成してください。\n\n1. ユーザーから10個の整数をキーボード入力で受け取ります。\n2. 入力された整数を昇順にソートします。ただし、標準ライブラリのソート関数(qsortなど)は使用できません。独自のソートアルゴリズムを実装してください。\n3. ソートされた整数を標準出力に出力します。\n4. プログラムは、エラー処理(例えば、入力値が整数でない場合)を適切に含む必要があります。\n\n例:\n入力: 5, 2, 9, 1, 5, 6, 3, 8, 4, 7\n出力: 1, 2, 3, 4, 5, 5, 6, 7, 8, 9",
  "reason": "学習者は動的メモリ確保、配列操作、および基本的なアルゴリズム（今回はNo4, No5の問題から類推して、ソートアルゴリズム）を理解していることを確認しました。この問題では、エラー処理と、標準ライブラリに頼らずにソートアルゴリズムを実装する能力を評価します。これは、アルゴリズムの理解を深め、プログラミングスキルを向上させるのに役立ちます。さらに、バブルソートや挿入ソートといった比較的シンプルなソートアルゴリズムを選択することで、学習者の負担を軽減しつつ、アルゴリズム設計能力を試すことができます。",
  "examples": [
    {
      "input": "5 2 9 1 5 6 3 8 4 7",
      "output": "1 2 3 4 5 5 6 7 8 9",
      "explanation": "入力された10個の整数が昇順にソートされています。"
    },
    {
      "input": "10 9 8 7 6 5 4 3 2 1",
      "output": "1 2 3 4 5 6 7 8 9 10",
      "explanation": "入力された10個の整数が昇順にソートされています。"
    },
    {
      "input": "a 1 2 3 4 5 6 7 8 9 10",
      "output": "エラーメッセージ: 無効な入力",
      "explanation": "入力値の中に整数以外が含まれているため、エラーメッセージが表示されます。"
    }
  ],
  "learning_objectives": [
    "バブルソートまたは挿入ソートなどのソートアルゴリズムの実装",
    "エラー処理の実装",
    "配列の効率的な操作",
    "アルゴリズムの設計と実装能力の向上"
  ]
}