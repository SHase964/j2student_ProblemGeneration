{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "以下の仕様を満たすC言語プログラムを作成してください。\n\n**仕様:**\n\n1. ユーザーから自然数nを入力させます。\n2. n行n列の2次元配列を動的に確保します。\n3. 配列の各要素に、0からn-1までの乱数を代入します。ただし、各行、各列には同じ数字が1つずつしか存在しないようにします。\n4. 生成された配列を表示します。\n5. メモリリークを防ぐために、動的に確保したメモリを解放します。\n\n**ヒント:**\n\n- 乱数の生成には`rand()`関数を使用できます。\n- `srand()`関数を使って乱数のシード値を設定することを忘れないでください。\n- 配列の各行、各列に同じ数字が1つずつしか存在しないようにするには、工夫が必要です。適切なアルゴリズムを設計する必要があります。\n- 確保したメモリは`free()`関数を使って解放してください。\n\n**例:**\n\nユーザーが入力したnが3の場合、出力例は以下のようになります（乱数のため、出力は毎回異なります）。\n```\n1 2 3\n3 1 2\n2 3 1\n```",
  "reason": "学習者は動的メモリ確保、2次元配列、乱数生成、そして条件を満たす配列生成という複数の概念を理解していることを確認済みです。この問題は、それらの概念を統合し、さらにアルゴリズム設計の能力を試すことで、より高度な問題解決能力を育成することを目的としています。条件を満たす配列生成は、比較的複雑なアルゴリズム設計を必要とするため、難易度を7に設定しました。",
  "examples": [
    {
      "input": "3",
      "output": "1 2 3\n3 1 2\n2 3 1",
      "explanation": "3行3列の配列が生成され、各行、各列に1～3の数字が1つずつ含まれています。これは一例であり、乱数の生成結果によって出力は異なります。"
    }
  ],
  "learning_objectives": [
    "2次元配列の動的確保と解放",
    "乱数の生成と利用",
    "制約条件を満たすアルゴリズム設計",
    "メモリ管理",
    "複雑な問題への対応"
  ]
}