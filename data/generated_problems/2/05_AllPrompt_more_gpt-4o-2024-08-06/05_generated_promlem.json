{
  "selected_problem": {
    "problem_id": "AdvancedPointerManipulation01",
    "difficulty": 6,
    "description": "動的に確保された整数配列を引数として受け取り、その配列のすべての要素を二倍にした新しい配列を返す関数を実装してください。この関数はメモリを適切に確保し、使用後はメモリを解放する必要があります。",
    "reason": "この問題は、学習者の動的メモリ管理の理解を深め、ポインタ操作のスキルを向上させることを目的としています。過去の提出から、学習者は基本的なポインタ操作と動的メモリ確保の知識を習得していることがわかります。この問題では、さらに応用的な操作として、新しい配列の作成とメモリ管理を求めることで、スキルを次のレベルに引き上げます。",
    "examples": [
      {
        "input": "arr = {1, 2, 3, 4}, size = 4",
        "output": "result = {2, 4, 6, 8}",
        "explanation": "元の配列の各要素を二倍して新しい配列を作成し、それを返します。"
      }
    ],
    "learning_objectives": [
      "動的メモリの確保と解放",
      "関数引数としてのポインタの使用",
      "ポインタによる配列操作",
      "メモリリークを防ぐ適切なメモリ管理"
    ]
  },
  "reasoning": "この問題は、学習者の現在のスキルセットに最も適合しており、動的メモリ管理とポインタ操作のスキルを強化するのに適しています。学習者は既に基本的なポインタ操作に慣れており、この問題を通じて新しい配列の作成とメモリ管理の応用を学ぶことができます。また、問題の難易度が適切であり、学習目標も明確であるため、学習者にとって実装可能でありながら挑戦的な課題となります。",
  "improvements": [
    "問題文にメモリリークを防ぐためのヒントを追加する。",
    "関数のプロトタイプを提供し、学習者が関数の署名を理解しやすくする。",
    "メモリ解放の重要性を強調するための追加の説明を提供する。"
  ]
}