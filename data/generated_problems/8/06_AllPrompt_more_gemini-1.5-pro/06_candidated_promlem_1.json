{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "与えられた2つの整数の配列（array1とarray2）を結合し、その結果を新たな動的に確保された配列に格納して返す関数`merge_arrays`を作成してください。\n\n関数`merge_arrays`は、以下の引数を受け取ります。\n\n- `array1`: 1つ目の整数配列\n- `size1`: `array1`の要素数\n- `array2`: 2つ目の整数配列\n- `size2`: `array2`の要素数\n\n関数は、`array1`と`array2`のすべての要素をこの順に含む新たな配列を動的に確保し、そのポインタを返します。また、新たな配列のサイズを`size`というポインタ変数に格納します。\n\n例えば、`array1`が`{1, 2, 3}`、`size1`が3、`array2`が`{4, 5}`、`size2`が2の場合、関数は`{1, 2, 3, 4, 5}`を格納した新たな配列へのポインタを返し、`size`には5が格納されます。\n\n関数のプロトタイプは以下の通りです。\n\n```c\nint *merge_arrays(int array1[], int size1, int array2[], int size2, int *size);\n```",
  "reason": "学習者は、動的メモリ確保、配列操作、ポインタ、ループ、関数定義といったC言語の基礎的な概念を理解し、正しく使用しています。No4.c、No5.c、No6.c の問題解答から、学習者は一次元配列と二次元配列の操作、文字列操作、動的メモリ確保、ポインタ操作を理解していることがわかります。\n\nこの問題では、学習者がこれらのスキルを組み合わせて、より複雑な問題を解決する能力を評価します。具体的には、2つの配列を結合する際に、新たな配列のサイズを計算し、動的にメモリを確保する必要があります。また、ポインタ変数を通じて新たな配列のサイズを返す必要があり、ポインタの理解度も試されます。\n\nこの問題は、学習者が既存の知識を応用し、より複雑なプログラムを設計・実装する能力を養うのに役立ちます。",
  "examples": [
    {
      "input": "array1 = {1, 2, 3}, size1 = 3, array2 = {4, 5}, size2 = 2",
      "output": "merged_array = {1, 2, 3, 4, 5}, size = 5",
      "explanation": "2つの配列`array1`と`array2`が結合され、新たな配列`merged_array`が作成されます。`size`には、`merged_array`の要素数である5が格納されます。"
    },
    {
      "input": "array1 = {}, size1 = 0, array2 = {1}, size2 = 1",
      "output": "merged_array = {1}, size = 1",
      "explanation": "空の配列と要素が1つの配列が結合されます。"
    },
    {
      "input": "array1 = {1, 2}, size1 = 2, array2 = {}, size2 = 0",
      "output": "merged_array = {1, 2}, size = 2",
      "explanation": "要素が2つの配列と空の配列が結合されます。"
    }
  ],
  "learning_objectives": [
    "動的メモリ確保の理解",
    "配列操作の習熟",
    "ポインタの理解",
    "関数定義と呼び出しの理解",
    "複数の配列の結合"
  ]
}