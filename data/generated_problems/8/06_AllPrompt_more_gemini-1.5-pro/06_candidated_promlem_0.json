{
  "problem_id": "No7.c",
  "difficulty": 7,
  "description": "可変長の文字列を複数入力し、それらをアルファベット順にソートして出力するプログラムを作成してください。文字列の入力は、空行が入力されるまで続きます。文字列の格納には動的メモリ割当てを使用し、ソートにはポインタ配列を用いてください。最大で100個の文字列が入力されるものとします。",
  "reason": "学習者は、動的メモリ割当て、配列操作、文字列操作、ポインタの基本的な理解を示しています。No4.c, No5.c, No6.c の解答から、動的配列の確保、要素へのアクセス、ポインタ変数の使用、文字列の処理、配列の逆順出力、偶数判定といったスキルが確認できます。しかし、No5.c で転置行列を求める際に、一時的な2次元配列を新たに確保しており、メモリ効率が最適ではありません。また、文字列操作においても、No6.c で文字列長を求める処理を自身で実装していますが、標準ライブラリ関数 strlen を活用することでコードの簡潔化と可読性向上が期待できます。\n\nこの問題では、これらのスキルを組み合わせ、より複雑な文字列操作と動的メモリ管理を必要とする課題に挑戦させます。可変長の文字列を扱うことで、動的メモリ割当ての理解を深め、ポインタ配列を用いたソート処理によって、ポインタの活用能力とアルゴリズムの理解度を評価します。さらに、標準ライブラリ関数 strlen や strcmp を活用することで、コードの効率化と可読性向上を促します。",
  "examples": [
    {
      "input": "apple\nbanana\norange\n\n",
      "output": "apple\nbanana\norange\n",
      "explanation": "3つの文字列を入力し、アルファベット順にソートして出力しています。"
    },
    {
      "input": "grape\nkiwi\nmelon\npineapple\n\n",
      "output": "grape\nkiwi\nmelon\npinepple\n",
      "explanation": "4つの文字列を入力し、アルファベット順にソートして出力しています。"
    }
  ],
  "learning_objectives": [
    "動的メモリ割当ての理解",
    "ポインタ配列の操作",
    "文字列の比較とソート",
    "標準ライブラリ関数の活用"
  ]
}